"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookVerificationError = exports.validateEvent = void 0;
const standardwebhooks_1 = require("standardwebhooks");
const components_1 = require("../models/components");
const errors_1 = require("../models/errors");
class WebhookVerificationError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
    }
}
exports.WebhookVerificationError = WebhookVerificationError;
const parseEvent = (parsed) => {
    try {
        switch (parsed.type) {
            case 'benefit.created':
                return components_1.WebhookBenefitCreatedPayload$inboundSchema.parse(parsed);
            case 'benefit_grant.created':
                return components_1.WebhookBenefitGrantCreatedPayload$inboundSchema.parse(parsed);
            case 'benefit_grant.revoked':
                return components_1.WebhookBenefitGrantRevokedPayload$inboundSchema.parse(parsed);
            case 'benefit_grant.updated':
                return components_1.WebhookBenefitGrantUpdatedPayload$inboundSchema.parse(parsed);
            case 'benefit.updated':
                return components_1.WebhookBenefitUpdatedPayload$inboundSchema.parse(parsed);
            case 'checkout.created':
                return components_1.WebhookCheckoutCreatedPayload$inboundSchema.parse(parsed);
            case 'checkout.updated':
                return components_1.WebhookCheckoutUpdatedPayload$inboundSchema.parse(parsed);
            case 'order.created':
                return components_1.WebhookOrderCreatedPayload$inboundSchema.parse(parsed);
            case 'organization.updated':
                return components_1.WebhookOrganizationUpdatedPayload$inboundSchema.parse(parsed);
            case 'pledge.created':
                return components_1.WebhookPledgeCreatedPayload$inboundSchema.parse(parsed);
            case 'pledge.updated':
                return components_1.WebhookPledgeUpdatedPayload$inboundSchema.parse(parsed);
            case 'product.created':
                return components_1.WebhookProductCreatedPayload$inboundSchema.parse(parsed);
            case 'product.updated':
                return components_1.WebhookProductUpdatedPayload$inboundSchema.parse(parsed);
            case 'subscription.active':
                return components_1.WebhookSubscriptionActivePayload$inboundSchema.parse(parsed);
            case 'subscription.canceled':
                return components_1.WebhookSubscriptionCanceledPayload$inboundSchema.parse(parsed);
            case 'subscription.created':
                return components_1.WebhookSubscriptionCreatedPayload$inboundSchema.parse(parsed);
            case 'subscription.revoked':
                return components_1.WebhookSubscriptionRevokedPayload$inboundSchema.parse(parsed);
            case 'subscription.updated':
                return components_1.WebhookSubscriptionUpdatedPayload$inboundSchema.parse(parsed);
            default:
                throw new errors_1.SDKValidationError(`Unknown event type: ${parsed.type}`, parsed.type, parsed);
        }
    }
    catch (error) {
        throw new errors_1.SDKValidationError('Failed to parse event', error, parsed);
    }
};
const validateEvent = (body, headers, secret) => {
    const base64Secret = Buffer.from(secret, 'utf-8').toString('base64');
    const webhook = new standardwebhooks_1.Webhook(base64Secret);
    try {
        const parsed = webhook.verify(body, headers);
        return parseEvent(parsed);
    }
    catch (error) {
        if (error instanceof standardwebhooks_1.WebhookVerificationError) {
            throw new WebhookVerificationError(error.message);
        }
        throw error;
    }
};
exports.validateEvent = validateEvent;
//# sourceMappingURL=index.js.map