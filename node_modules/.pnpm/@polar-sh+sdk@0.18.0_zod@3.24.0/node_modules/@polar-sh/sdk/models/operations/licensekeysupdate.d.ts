import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type LicenseKeysUpdateRequest = {
    id: string;
    licenseKeyUpdate: components.LicenseKeyUpdate;
};
/** @internal */
export declare const LicenseKeysUpdateRequest$inboundSchema: z.ZodType<LicenseKeysUpdateRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type LicenseKeysUpdateRequest$Outbound = {
    id: string;
    LicenseKeyUpdate: components.LicenseKeyUpdate$Outbound;
};
/** @internal */
export declare const LicenseKeysUpdateRequest$outboundSchema: z.ZodType<LicenseKeysUpdateRequest$Outbound, z.ZodTypeDef, LicenseKeysUpdateRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace LicenseKeysUpdateRequest$ {
    /** @deprecated use `LicenseKeysUpdateRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<LicenseKeysUpdateRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `LicenseKeysUpdateRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<LicenseKeysUpdateRequest$Outbound, z.ZodTypeDef, LicenseKeysUpdateRequest>;
    /** @deprecated use `LicenseKeysUpdateRequest$Outbound` instead. */
    type Outbound = LicenseKeysUpdateRequest$Outbound;
}
export declare function licenseKeysUpdateRequestToJSON(licenseKeysUpdateRequest: LicenseKeysUpdateRequest): string;
export declare function licenseKeysUpdateRequestFromJSON(jsonString: string): SafeParseResult<LicenseKeysUpdateRequest, SDKValidationError>;
//# sourceMappingURL=licensekeysupdate.d.ts.map