import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type DiscountsUpdateRequest = {
    /**
     * The discount ID.
     */
    id: string;
    discountUpdate: components.DiscountUpdate;
};
/** @internal */
export declare const DiscountsUpdateRequest$inboundSchema: z.ZodType<DiscountsUpdateRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type DiscountsUpdateRequest$Outbound = {
    id: string;
    DiscountUpdate: components.DiscountUpdate$Outbound;
};
/** @internal */
export declare const DiscountsUpdateRequest$outboundSchema: z.ZodType<DiscountsUpdateRequest$Outbound, z.ZodTypeDef, DiscountsUpdateRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DiscountsUpdateRequest$ {
    /** @deprecated use `DiscountsUpdateRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DiscountsUpdateRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DiscountsUpdateRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DiscountsUpdateRequest$Outbound, z.ZodTypeDef, DiscountsUpdateRequest>;
    /** @deprecated use `DiscountsUpdateRequest$Outbound` instead. */
    type Outbound = DiscountsUpdateRequest$Outbound;
}
export declare function discountsUpdateRequestToJSON(discountsUpdateRequest: DiscountsUpdateRequest): string;
export declare function discountsUpdateRequestFromJSON(jsonString: string): SafeParseResult<DiscountsUpdateRequest, SDKValidationError>;
//# sourceMappingURL=discountsupdate.d.ts.map