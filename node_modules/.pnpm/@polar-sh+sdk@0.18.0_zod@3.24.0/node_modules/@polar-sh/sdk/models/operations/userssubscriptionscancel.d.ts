import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type UsersSubscriptionsCancelRequest = {
    /**
     * The subscription ID.
     */
    id: string;
};
/** @internal */
export declare const UsersSubscriptionsCancelRequest$inboundSchema: z.ZodType<UsersSubscriptionsCancelRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type UsersSubscriptionsCancelRequest$Outbound = {
    id: string;
};
/** @internal */
export declare const UsersSubscriptionsCancelRequest$outboundSchema: z.ZodType<UsersSubscriptionsCancelRequest$Outbound, z.ZodTypeDef, UsersSubscriptionsCancelRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UsersSubscriptionsCancelRequest$ {
    /** @deprecated use `UsersSubscriptionsCancelRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UsersSubscriptionsCancelRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UsersSubscriptionsCancelRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UsersSubscriptionsCancelRequest$Outbound, z.ZodTypeDef, UsersSubscriptionsCancelRequest>;
    /** @deprecated use `UsersSubscriptionsCancelRequest$Outbound` instead. */
    type Outbound = UsersSubscriptionsCancelRequest$Outbound;
}
export declare function usersSubscriptionsCancelRequestToJSON(usersSubscriptionsCancelRequest: UsersSubscriptionsCancelRequest): string;
export declare function usersSubscriptionsCancelRequestFromJSON(jsonString: string): SafeParseResult<UsersSubscriptionsCancelRequest, SDKValidationError>;
//# sourceMappingURL=userssubscriptionscancel.d.ts.map