import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Address, Address$Outbound } from "./address.js";
export type CheckoutProductCreateMetadata = string | number | boolean;
/**
 * Key-value object storing custom field values.
 */
export type CheckoutProductCreateCustomFieldData = {};
/**
 * Payment processor to use. Currently only Stripe is supported.
 */
export declare const CheckoutProductCreatePaymentProcessor: {
    readonly Stripe: "stripe";
};
/**
 * Payment processor to use. Currently only Stripe is supported.
 */
export type CheckoutProductCreatePaymentProcessor = ClosedEnum<typeof CheckoutProductCreatePaymentProcessor>;
/**
 * Create a new checkout session from a product.
 *
 * @remarks
 *
 * Metadata set on the checkout will be copied
 * to the resulting order and/or subscription.
 */
export type CheckoutProductCreate = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    /**
     * Key-value object storing custom field values.
     */
    customFieldData?: CheckoutProductCreateCustomFieldData | undefined;
    /**
     * Payment processor to use. Currently only Stripe is supported.
     */
    paymentProcessor?: "stripe" | undefined;
    /**
     * ID of the discount to apply to the checkout.
     */
    discountId?: string | null | undefined;
    /**
     * Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
     */
    allowDiscountCodes?: boolean | undefined;
    amount?: number | null | undefined;
    customerName?: string | null | undefined;
    customerEmail?: string | null | undefined;
    customerIpAddress?: string | null | undefined;
    customerBillingAddress?: Address | null | undefined;
    customerTaxId?: string | null | undefined;
    /**
     * ID of a subscription to upgrade. It must be on a free pricing. If checkout is successful, metadata set on this checkout will be copied to the subscription, and existing keys will be overwritten.
     */
    subscriptionId?: string | null | undefined;
    /**
     * URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
     */
    successUrl?: string | null | undefined;
    /**
     * If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page.
     */
    embedOrigin?: string | null | undefined;
    /**
     * ID of the product to checkout. First available price will be selected.
     */
    productId: string;
};
/** @internal */
export declare const CheckoutProductCreateMetadata$inboundSchema: z.ZodType<CheckoutProductCreateMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutProductCreateMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const CheckoutProductCreateMetadata$outboundSchema: z.ZodType<CheckoutProductCreateMetadata$Outbound, z.ZodTypeDef, CheckoutProductCreateMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutProductCreateMetadata$ {
    /** @deprecated use `CheckoutProductCreateMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutProductCreateMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutProductCreateMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutProductCreateMetadata$Outbound, z.ZodTypeDef, CheckoutProductCreateMetadata>;
    /** @deprecated use `CheckoutProductCreateMetadata$Outbound` instead. */
    type Outbound = CheckoutProductCreateMetadata$Outbound;
}
export declare function checkoutProductCreateMetadataToJSON(checkoutProductCreateMetadata: CheckoutProductCreateMetadata): string;
export declare function checkoutProductCreateMetadataFromJSON(jsonString: string): SafeParseResult<CheckoutProductCreateMetadata, SDKValidationError>;
/** @internal */
export declare const CheckoutProductCreateCustomFieldData$inboundSchema: z.ZodType<CheckoutProductCreateCustomFieldData, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutProductCreateCustomFieldData$Outbound = {};
/** @internal */
export declare const CheckoutProductCreateCustomFieldData$outboundSchema: z.ZodType<CheckoutProductCreateCustomFieldData$Outbound, z.ZodTypeDef, CheckoutProductCreateCustomFieldData>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutProductCreateCustomFieldData$ {
    /** @deprecated use `CheckoutProductCreateCustomFieldData$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutProductCreateCustomFieldData, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutProductCreateCustomFieldData$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutProductCreateCustomFieldData$Outbound, z.ZodTypeDef, CheckoutProductCreateCustomFieldData>;
    /** @deprecated use `CheckoutProductCreateCustomFieldData$Outbound` instead. */
    type Outbound = CheckoutProductCreateCustomFieldData$Outbound;
}
export declare function checkoutProductCreateCustomFieldDataToJSON(checkoutProductCreateCustomFieldData: CheckoutProductCreateCustomFieldData): string;
export declare function checkoutProductCreateCustomFieldDataFromJSON(jsonString: string): SafeParseResult<CheckoutProductCreateCustomFieldData, SDKValidationError>;
/** @internal */
export declare const CheckoutProductCreatePaymentProcessor$inboundSchema: z.ZodNativeEnum<typeof CheckoutProductCreatePaymentProcessor>;
/** @internal */
export declare const CheckoutProductCreatePaymentProcessor$outboundSchema: z.ZodNativeEnum<typeof CheckoutProductCreatePaymentProcessor>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutProductCreatePaymentProcessor$ {
    /** @deprecated use `CheckoutProductCreatePaymentProcessor$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Stripe: "stripe";
    }>;
    /** @deprecated use `CheckoutProductCreatePaymentProcessor$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Stripe: "stripe";
    }>;
}
/** @internal */
export declare const CheckoutProductCreate$inboundSchema: z.ZodType<CheckoutProductCreate, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutProductCreate$Outbound = {
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    custom_field_data?: CheckoutProductCreateCustomFieldData$Outbound | undefined;
    payment_processor: "stripe";
    discount_id?: string | null | undefined;
    allow_discount_codes: boolean;
    amount?: number | null | undefined;
    customer_name?: string | null | undefined;
    customer_email?: string | null | undefined;
    customer_ip_address?: string | null | undefined;
    customer_billing_address?: Address$Outbound | null | undefined;
    customer_tax_id?: string | null | undefined;
    subscription_id?: string | null | undefined;
    success_url?: string | null | undefined;
    embed_origin?: string | null | undefined;
    product_id: string;
};
/** @internal */
export declare const CheckoutProductCreate$outboundSchema: z.ZodType<CheckoutProductCreate$Outbound, z.ZodTypeDef, CheckoutProductCreate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutProductCreate$ {
    /** @deprecated use `CheckoutProductCreate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutProductCreate, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutProductCreate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutProductCreate$Outbound, z.ZodTypeDef, CheckoutProductCreate>;
    /** @deprecated use `CheckoutProductCreate$Outbound` instead. */
    type Outbound = CheckoutProductCreate$Outbound;
}
export declare function checkoutProductCreateToJSON(checkoutProductCreate: CheckoutProductCreate): string;
export declare function checkoutProductCreateFromJSON(jsonString: string): SafeParseResult<CheckoutProductCreate, SDKValidationError>;
//# sourceMappingURL=checkoutproductcreate.d.ts.map