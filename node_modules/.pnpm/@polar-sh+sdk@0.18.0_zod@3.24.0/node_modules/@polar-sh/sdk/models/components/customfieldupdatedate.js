"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomFieldUpdateDate$ = exports.CustomFieldUpdateDate$outboundSchema = exports.CustomFieldUpdateDate$inboundSchema = exports.CustomFieldUpdateDateType$ = exports.CustomFieldUpdateDateType$outboundSchema = exports.CustomFieldUpdateDateType$inboundSchema = exports.CustomFieldUpdateDateMetadata$ = exports.CustomFieldUpdateDateMetadata$outboundSchema = exports.CustomFieldUpdateDateMetadata$inboundSchema = exports.CustomFieldUpdateDateType = void 0;
exports.customFieldUpdateDateMetadataToJSON = customFieldUpdateDateMetadataToJSON;
exports.customFieldUpdateDateMetadataFromJSON = customFieldUpdateDateMetadataFromJSON;
exports.customFieldUpdateDateToJSON = customFieldUpdateDateToJSON;
exports.customFieldUpdateDateFromJSON = customFieldUpdateDateFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const customfielddateproperties_js_1 = require("./customfielddateproperties.js");
exports.CustomFieldUpdateDateType = {
    Date: "date",
};
/** @internal */
exports.CustomFieldUpdateDateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
exports.CustomFieldUpdateDateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomFieldUpdateDateMetadata$;
(function (CustomFieldUpdateDateMetadata$) {
    /** @deprecated use `CustomFieldUpdateDateMetadata$inboundSchema` instead. */
    CustomFieldUpdateDateMetadata$.inboundSchema = exports.CustomFieldUpdateDateMetadata$inboundSchema;
    /** @deprecated use `CustomFieldUpdateDateMetadata$outboundSchema` instead. */
    CustomFieldUpdateDateMetadata$.outboundSchema = exports.CustomFieldUpdateDateMetadata$outboundSchema;
})(CustomFieldUpdateDateMetadata$ || (exports.CustomFieldUpdateDateMetadata$ = CustomFieldUpdateDateMetadata$ = {}));
function customFieldUpdateDateMetadataToJSON(customFieldUpdateDateMetadata) {
    return JSON.stringify(exports.CustomFieldUpdateDateMetadata$outboundSchema.parse(customFieldUpdateDateMetadata));
}
function customFieldUpdateDateMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomFieldUpdateDateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldUpdateDateMetadata' from JSON`);
}
/** @internal */
exports.CustomFieldUpdateDateType$inboundSchema = z.nativeEnum(exports.CustomFieldUpdateDateType);
/** @internal */
exports.CustomFieldUpdateDateType$outboundSchema = exports.CustomFieldUpdateDateType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomFieldUpdateDateType$;
(function (CustomFieldUpdateDateType$) {
    /** @deprecated use `CustomFieldUpdateDateType$inboundSchema` instead. */
    CustomFieldUpdateDateType$.inboundSchema = exports.CustomFieldUpdateDateType$inboundSchema;
    /** @deprecated use `CustomFieldUpdateDateType$outboundSchema` instead. */
    CustomFieldUpdateDateType$.outboundSchema = exports.CustomFieldUpdateDateType$outboundSchema;
})(CustomFieldUpdateDateType$ || (exports.CustomFieldUpdateDateType$ = CustomFieldUpdateDateType$ = {}));
/** @internal */
exports.CustomFieldUpdateDate$inboundSchema = z.object({
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    name: z.nullable(z.string()).optional(),
    slug: z.nullable(z.string()).optional(),
    type: z.literal("date").optional(),
    properties: z.nullable(customfielddateproperties_js_1.CustomFieldDateProperties$inboundSchema).optional(),
});
/** @internal */
exports.CustomFieldUpdateDate$outboundSchema = z.object({
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    name: z.nullable(z.string()).optional(),
    slug: z.nullable(z.string()).optional(),
    type: z.literal("date").default("date"),
    properties: z.nullable(customfielddateproperties_js_1.CustomFieldDateProperties$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomFieldUpdateDate$;
(function (CustomFieldUpdateDate$) {
    /** @deprecated use `CustomFieldUpdateDate$inboundSchema` instead. */
    CustomFieldUpdateDate$.inboundSchema = exports.CustomFieldUpdateDate$inboundSchema;
    /** @deprecated use `CustomFieldUpdateDate$outboundSchema` instead. */
    CustomFieldUpdateDate$.outboundSchema = exports.CustomFieldUpdateDate$outboundSchema;
})(CustomFieldUpdateDate$ || (exports.CustomFieldUpdateDate$ = CustomFieldUpdateDate$ = {}));
function customFieldUpdateDateToJSON(customFieldUpdateDate) {
    return JSON.stringify(exports.CustomFieldUpdateDate$outboundSchema.parse(customFieldUpdateDate));
}
function customFieldUpdateDateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomFieldUpdateDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldUpdateDate' from JSON`);
}
//# sourceMappingURL=customfieldupdatedate.js.map