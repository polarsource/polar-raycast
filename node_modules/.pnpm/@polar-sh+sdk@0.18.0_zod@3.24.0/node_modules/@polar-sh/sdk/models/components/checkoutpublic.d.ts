import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Address, Address$Outbound } from "./address.js";
import { AttachedCustomField, AttachedCustomField$Outbound } from "./attachedcustomfield.js";
import { CheckoutDiscountFixedOnceForeverDuration, CheckoutDiscountFixedOnceForeverDuration$Outbound } from "./checkoutdiscountfixedonceforeverduration.js";
import { CheckoutDiscountFixedRepeatDuration, CheckoutDiscountFixedRepeatDuration$Outbound } from "./checkoutdiscountfixedrepeatduration.js";
import { CheckoutDiscountPercentageOnceForeverDuration, CheckoutDiscountPercentageOnceForeverDuration$Outbound } from "./checkoutdiscountpercentageonceforeverduration.js";
import { CheckoutDiscountPercentageRepeatDuration, CheckoutDiscountPercentageRepeatDuration$Outbound } from "./checkoutdiscountpercentagerepeatduration.js";
import { CheckoutProduct, CheckoutProduct$Outbound } from "./checkoutproduct.js";
import { CheckoutStatus } from "./checkoutstatus.js";
import { Organization, Organization$Outbound } from "./organization.js";
import { ProductPrice, ProductPrice$Outbound } from "./productprice.js";
/**
 * Key-value object storing custom field values.
 */
export type CheckoutPublicCustomFieldData = {};
export type CheckoutPublicPaymentProcessorMetadata = {};
export type CheckoutPublicDiscount = CheckoutDiscountPercentageOnceForeverDuration | CheckoutDiscountFixedOnceForeverDuration | CheckoutDiscountPercentageRepeatDuration | CheckoutDiscountFixedRepeatDuration;
/**
 * Checkout session data retrieved using the client secret.
 */
export type CheckoutPublic = {
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the object.
     */
    id: string;
    /**
     * Key-value object storing custom field values.
     */
    customFieldData?: CheckoutPublicCustomFieldData | undefined;
    paymentProcessor?: "stripe" | undefined;
    status: CheckoutStatus;
    /**
     * Client secret used to update and complete the checkout session from the client.
     */
    clientSecret: string;
    /**
     * URL where the customer can access the checkout session.
     */
    url: string;
    /**
     * Expiration date and time of the checkout session.
     */
    expiresAt: Date;
    /**
     * URL where the customer will be redirected after a successful payment.
     */
    successUrl: string;
    /**
     * When checkout is embedded, represents the Origin of the page embedding the checkout. Used as a security measure to send messages only to the embedding page.
     */
    embedOrigin: string | null;
    amount: number | null;
    /**
     * Computed tax amount to pay in cents.
     */
    taxAmount: number | null;
    /**
     * Currency code of the checkout session.
     */
    currency: string | null;
    /**
     * Subtotal amount in cents, including discounts and before tax.
     */
    subtotalAmount: number | null;
    /**
     * Total amount to pay in cents, including discounts and after tax.
     */
    totalAmount: number | null;
    /**
     * ID of the product to checkout.
     */
    productId: string;
    /**
     * ID of the product price to checkout.
     */
    productPriceId: string;
    /**
     * ID of the discount applied to the checkout.
     */
    discountId: string | null;
    /**
     * Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
     */
    allowDiscountCodes: boolean;
    /**
     * Whether the discount is applicable to the checkout. Typically, free and custom prices are not discountable.
     */
    isDiscountApplicable: boolean;
    /**
     * Whether the product price is free, regardless of discounts.
     */
    isFreeProductPrice: boolean;
    /**
     * Whether the checkout requires payment, e.g. in case of free products or discounts that cover the total amount.
     */
    isPaymentRequired: boolean;
    /**
     * Whether the checkout requires setting up a payment method, regardless of the amount, e.g. subscriptions that have first free cycles.
     */
    isPaymentSetupRequired: boolean;
    /**
     * Whether the checkout requires a payment form, whether because of a payment or payment method setup.
     */
    isPaymentFormRequired: boolean;
    customerId: string | null;
    customerName: string | null;
    customerEmail: string | null;
    customerIpAddress: string | null;
    customerBillingAddress: Address | null;
    customerTaxId: string | null;
    paymentProcessorMetadata: CheckoutPublicPaymentProcessorMetadata;
    /**
     * Product data for a checkout session.
     */
    product: CheckoutProduct;
    productPrice: ProductPrice;
    discount: CheckoutDiscountPercentageOnceForeverDuration | CheckoutDiscountFixedOnceForeverDuration | CheckoutDiscountPercentageRepeatDuration | CheckoutDiscountFixedRepeatDuration | null;
    organization: Organization;
    attachedCustomFields: Array<AttachedCustomField>;
};
/** @internal */
export declare const CheckoutPublicCustomFieldData$inboundSchema: z.ZodType<CheckoutPublicCustomFieldData, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutPublicCustomFieldData$Outbound = {};
/** @internal */
export declare const CheckoutPublicCustomFieldData$outboundSchema: z.ZodType<CheckoutPublicCustomFieldData$Outbound, z.ZodTypeDef, CheckoutPublicCustomFieldData>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutPublicCustomFieldData$ {
    /** @deprecated use `CheckoutPublicCustomFieldData$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutPublicCustomFieldData, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutPublicCustomFieldData$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutPublicCustomFieldData$Outbound, z.ZodTypeDef, CheckoutPublicCustomFieldData>;
    /** @deprecated use `CheckoutPublicCustomFieldData$Outbound` instead. */
    type Outbound = CheckoutPublicCustomFieldData$Outbound;
}
export declare function checkoutPublicCustomFieldDataToJSON(checkoutPublicCustomFieldData: CheckoutPublicCustomFieldData): string;
export declare function checkoutPublicCustomFieldDataFromJSON(jsonString: string): SafeParseResult<CheckoutPublicCustomFieldData, SDKValidationError>;
/** @internal */
export declare const CheckoutPublicPaymentProcessorMetadata$inboundSchema: z.ZodType<CheckoutPublicPaymentProcessorMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutPublicPaymentProcessorMetadata$Outbound = {};
/** @internal */
export declare const CheckoutPublicPaymentProcessorMetadata$outboundSchema: z.ZodType<CheckoutPublicPaymentProcessorMetadata$Outbound, z.ZodTypeDef, CheckoutPublicPaymentProcessorMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutPublicPaymentProcessorMetadata$ {
    /** @deprecated use `CheckoutPublicPaymentProcessorMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutPublicPaymentProcessorMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutPublicPaymentProcessorMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutPublicPaymentProcessorMetadata$Outbound, z.ZodTypeDef, CheckoutPublicPaymentProcessorMetadata>;
    /** @deprecated use `CheckoutPublicPaymentProcessorMetadata$Outbound` instead. */
    type Outbound = CheckoutPublicPaymentProcessorMetadata$Outbound;
}
export declare function checkoutPublicPaymentProcessorMetadataToJSON(checkoutPublicPaymentProcessorMetadata: CheckoutPublicPaymentProcessorMetadata): string;
export declare function checkoutPublicPaymentProcessorMetadataFromJSON(jsonString: string): SafeParseResult<CheckoutPublicPaymentProcessorMetadata, SDKValidationError>;
/** @internal */
export declare const CheckoutPublicDiscount$inboundSchema: z.ZodType<CheckoutPublicDiscount, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutPublicDiscount$Outbound = CheckoutDiscountPercentageOnceForeverDuration$Outbound | CheckoutDiscountFixedOnceForeverDuration$Outbound | CheckoutDiscountPercentageRepeatDuration$Outbound | CheckoutDiscountFixedRepeatDuration$Outbound;
/** @internal */
export declare const CheckoutPublicDiscount$outboundSchema: z.ZodType<CheckoutPublicDiscount$Outbound, z.ZodTypeDef, CheckoutPublicDiscount>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutPublicDiscount$ {
    /** @deprecated use `CheckoutPublicDiscount$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutPublicDiscount, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutPublicDiscount$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutPublicDiscount$Outbound, z.ZodTypeDef, CheckoutPublicDiscount>;
    /** @deprecated use `CheckoutPublicDiscount$Outbound` instead. */
    type Outbound = CheckoutPublicDiscount$Outbound;
}
export declare function checkoutPublicDiscountToJSON(checkoutPublicDiscount: CheckoutPublicDiscount): string;
export declare function checkoutPublicDiscountFromJSON(jsonString: string): SafeParseResult<CheckoutPublicDiscount, SDKValidationError>;
/** @internal */
export declare const CheckoutPublic$inboundSchema: z.ZodType<CheckoutPublic, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutPublic$Outbound = {
    created_at: string;
    modified_at: string | null;
    id: string;
    custom_field_data?: CheckoutPublicCustomFieldData$Outbound | undefined;
    payment_processor: "stripe";
    status: string;
    client_secret: string;
    url: string;
    expires_at: string;
    success_url: string;
    embed_origin: string | null;
    amount: number | null;
    tax_amount: number | null;
    currency: string | null;
    subtotal_amount: number | null;
    total_amount: number | null;
    product_id: string;
    product_price_id: string;
    discount_id: string | null;
    allow_discount_codes: boolean;
    is_discount_applicable: boolean;
    is_free_product_price: boolean;
    is_payment_required: boolean;
    is_payment_setup_required: boolean;
    is_payment_form_required: boolean;
    customer_id: string | null;
    customer_name: string | null;
    customer_email: string | null;
    customer_ip_address: string | null;
    customer_billing_address: Address$Outbound | null;
    customer_tax_id: string | null;
    payment_processor_metadata: CheckoutPublicPaymentProcessorMetadata$Outbound;
    product: CheckoutProduct$Outbound;
    product_price: ProductPrice$Outbound;
    discount: CheckoutDiscountPercentageOnceForeverDuration$Outbound | CheckoutDiscountFixedOnceForeverDuration$Outbound | CheckoutDiscountPercentageRepeatDuration$Outbound | CheckoutDiscountFixedRepeatDuration$Outbound | null;
    organization: Organization$Outbound;
    attached_custom_fields: Array<AttachedCustomField$Outbound>;
};
/** @internal */
export declare const CheckoutPublic$outboundSchema: z.ZodType<CheckoutPublic$Outbound, z.ZodTypeDef, CheckoutPublic>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutPublic$ {
    /** @deprecated use `CheckoutPublic$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutPublic, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutPublic$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutPublic$Outbound, z.ZodTypeDef, CheckoutPublic>;
    /** @deprecated use `CheckoutPublic$Outbound` instead. */
    type Outbound = CheckoutPublic$Outbound;
}
export declare function checkoutPublicToJSON(checkoutPublic: CheckoutPublic): string;
export declare function checkoutPublicFromJSON(jsonString: string): SafeParseResult<CheckoutPublic, SDKValidationError>;
//# sourceMappingURL=checkoutpublic.d.ts.map