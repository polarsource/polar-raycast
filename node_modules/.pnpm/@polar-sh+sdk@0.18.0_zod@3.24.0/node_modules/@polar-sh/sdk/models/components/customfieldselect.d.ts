import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { CustomFieldSelectProperties, CustomFieldSelectProperties$Outbound } from "./customfieldselectproperties.js";
export type CustomFieldSelectMetadata = string | number | boolean;
export declare const CustomFieldSelectType: {
    readonly Select: "select";
};
export type CustomFieldSelectType = ClosedEnum<typeof CustomFieldSelectType>;
/**
 * Schema for a custom field of type select.
 */
export type CustomFieldSelect = {
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the object.
     */
    id: string;
    metadata: {
        [k: string]: string | number | boolean;
    };
    type?: "select" | undefined;
    /**
     * Identifier of the custom field. It'll be used as key when storing the value.
     */
    slug: string;
    /**
     * Name of the custom field.
     */
    name: string;
    /**
     * The ID of the organization owning the custom field.
     */
    organizationId: string;
    properties: CustomFieldSelectProperties;
};
/** @internal */
export declare const CustomFieldSelectMetadata$inboundSchema: z.ZodType<CustomFieldSelectMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldSelectMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const CustomFieldSelectMetadata$outboundSchema: z.ZodType<CustomFieldSelectMetadata$Outbound, z.ZodTypeDef, CustomFieldSelectMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldSelectMetadata$ {
    /** @deprecated use `CustomFieldSelectMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldSelectMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldSelectMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldSelectMetadata$Outbound, z.ZodTypeDef, CustomFieldSelectMetadata>;
    /** @deprecated use `CustomFieldSelectMetadata$Outbound` instead. */
    type Outbound = CustomFieldSelectMetadata$Outbound;
}
export declare function customFieldSelectMetadataToJSON(customFieldSelectMetadata: CustomFieldSelectMetadata): string;
export declare function customFieldSelectMetadataFromJSON(jsonString: string): SafeParseResult<CustomFieldSelectMetadata, SDKValidationError>;
/** @internal */
export declare const CustomFieldSelectType$inboundSchema: z.ZodNativeEnum<typeof CustomFieldSelectType>;
/** @internal */
export declare const CustomFieldSelectType$outboundSchema: z.ZodNativeEnum<typeof CustomFieldSelectType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldSelectType$ {
    /** @deprecated use `CustomFieldSelectType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Select: "select";
    }>;
    /** @deprecated use `CustomFieldSelectType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Select: "select";
    }>;
}
/** @internal */
export declare const CustomFieldSelect$inboundSchema: z.ZodType<CustomFieldSelect, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldSelect$Outbound = {
    created_at: string;
    modified_at: string | null;
    id: string;
    metadata: {
        [k: string]: string | number | boolean;
    };
    type: "select";
    slug: string;
    name: string;
    organization_id: string;
    properties: CustomFieldSelectProperties$Outbound;
};
/** @internal */
export declare const CustomFieldSelect$outboundSchema: z.ZodType<CustomFieldSelect$Outbound, z.ZodTypeDef, CustomFieldSelect>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldSelect$ {
    /** @deprecated use `CustomFieldSelect$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldSelect, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldSelect$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldSelect$Outbound, z.ZodTypeDef, CustomFieldSelect>;
    /** @deprecated use `CustomFieldSelect$Outbound` instead. */
    type Outbound = CustomFieldSelect$Outbound;
}
export declare function customFieldSelectToJSON(customFieldSelect: CustomFieldSelect): string;
export declare function customFieldSelectFromJSON(jsonString: string): SafeParseResult<CustomFieldSelect, SDKValidationError>;
//# sourceMappingURL=customfieldselect.d.ts.map