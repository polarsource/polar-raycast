"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomFieldNumber$ = exports.CustomFieldNumber$outboundSchema = exports.CustomFieldNumber$inboundSchema = exports.CustomFieldNumberType$ = exports.CustomFieldNumberType$outboundSchema = exports.CustomFieldNumberType$inboundSchema = exports.CustomFieldNumberMetadata$ = exports.CustomFieldNumberMetadata$outboundSchema = exports.CustomFieldNumberMetadata$inboundSchema = exports.CustomFieldNumberType = void 0;
exports.customFieldNumberMetadataToJSON = customFieldNumberMetadataToJSON;
exports.customFieldNumberMetadataFromJSON = customFieldNumberMetadataFromJSON;
exports.customFieldNumberToJSON = customFieldNumberToJSON;
exports.customFieldNumberFromJSON = customFieldNumberFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const customfieldnumberproperties_js_1 = require("./customfieldnumberproperties.js");
exports.CustomFieldNumberType = {
    Number: "number",
};
/** @internal */
exports.CustomFieldNumberMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
exports.CustomFieldNumberMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomFieldNumberMetadata$;
(function (CustomFieldNumberMetadata$) {
    /** @deprecated use `CustomFieldNumberMetadata$inboundSchema` instead. */
    CustomFieldNumberMetadata$.inboundSchema = exports.CustomFieldNumberMetadata$inboundSchema;
    /** @deprecated use `CustomFieldNumberMetadata$outboundSchema` instead. */
    CustomFieldNumberMetadata$.outboundSchema = exports.CustomFieldNumberMetadata$outboundSchema;
})(CustomFieldNumberMetadata$ || (exports.CustomFieldNumberMetadata$ = CustomFieldNumberMetadata$ = {}));
function customFieldNumberMetadataToJSON(customFieldNumberMetadata) {
    return JSON.stringify(exports.CustomFieldNumberMetadata$outboundSchema.parse(customFieldNumberMetadata));
}
function customFieldNumberMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomFieldNumberMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldNumberMetadata' from JSON`);
}
/** @internal */
exports.CustomFieldNumberType$inboundSchema = z.nativeEnum(exports.CustomFieldNumberType);
/** @internal */
exports.CustomFieldNumberType$outboundSchema = exports.CustomFieldNumberType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomFieldNumberType$;
(function (CustomFieldNumberType$) {
    /** @deprecated use `CustomFieldNumberType$inboundSchema` instead. */
    CustomFieldNumberType$.inboundSchema = exports.CustomFieldNumberType$inboundSchema;
    /** @deprecated use `CustomFieldNumberType$outboundSchema` instead. */
    CustomFieldNumberType$.outboundSchema = exports.CustomFieldNumberType$outboundSchema;
})(CustomFieldNumberType$ || (exports.CustomFieldNumberType$ = CustomFieldNumberType$ = {}));
/** @internal */
exports.CustomFieldNumber$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    type: z.literal("number").optional(),
    slug: z.string(),
    name: z.string(),
    organization_id: z.string(),
    properties: customfieldnumberproperties_js_1.CustomFieldNumberProperties$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
exports.CustomFieldNumber$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    type: z.literal("number").default("number"),
    slug: z.string(),
    name: z.string(),
    organizationId: z.string(),
    properties: customfieldnumberproperties_js_1.CustomFieldNumberProperties$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomFieldNumber$;
(function (CustomFieldNumber$) {
    /** @deprecated use `CustomFieldNumber$inboundSchema` instead. */
    CustomFieldNumber$.inboundSchema = exports.CustomFieldNumber$inboundSchema;
    /** @deprecated use `CustomFieldNumber$outboundSchema` instead. */
    CustomFieldNumber$.outboundSchema = exports.CustomFieldNumber$outboundSchema;
})(CustomFieldNumber$ || (exports.CustomFieldNumber$ = CustomFieldNumber$ = {}));
function customFieldNumberToJSON(customFieldNumber) {
    return JSON.stringify(exports.CustomFieldNumber$outboundSchema.parse(customFieldNumber));
}
function customFieldNumberFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomFieldNumber$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldNumber' from JSON`);
}
//# sourceMappingURL=customfieldnumber.js.map