import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Address, Address$Outbound } from "./address.js";
export type CustomFieldData = {};
export type CheckoutUpdateMetadata = string | number | boolean;
/**
 * Update an existing checkout session using an access token.
 */
export type CheckoutUpdate = {
    /**
     * Key-value object storing custom field values.
     */
    customFieldData?: CustomFieldData | null | undefined;
    /**
     * ID of the product price to checkout. Must correspond to a price linked to the same product.
     */
    productPriceId?: string | null | undefined;
    amount?: number | null | undefined;
    customerName?: string | null | undefined;
    customerEmail?: string | null | undefined;
    customerBillingAddress?: Address | null | undefined;
    customerTaxId?: string | null | undefined;
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | boolean;
    } | null | undefined;
    /**
     * ID of the discount to apply to the checkout.
     */
    discountId?: string | null | undefined;
    /**
     * Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
     */
    allowDiscountCodes?: boolean | null | undefined;
    customerIpAddress?: string | null | undefined;
    /**
     * URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
     */
    successUrl?: string | null | undefined;
    /**
     * If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page.
     */
    embedOrigin?: string | null | undefined;
};
/** @internal */
export declare const CustomFieldData$inboundSchema: z.ZodType<CustomFieldData, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldData$Outbound = {};
/** @internal */
export declare const CustomFieldData$outboundSchema: z.ZodType<CustomFieldData$Outbound, z.ZodTypeDef, CustomFieldData>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldData$ {
    /** @deprecated use `CustomFieldData$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldData, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldData$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldData$Outbound, z.ZodTypeDef, CustomFieldData>;
    /** @deprecated use `CustomFieldData$Outbound` instead. */
    type Outbound = CustomFieldData$Outbound;
}
export declare function customFieldDataToJSON(customFieldData: CustomFieldData): string;
export declare function customFieldDataFromJSON(jsonString: string): SafeParseResult<CustomFieldData, SDKValidationError>;
/** @internal */
export declare const CheckoutUpdateMetadata$inboundSchema: z.ZodType<CheckoutUpdateMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutUpdateMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const CheckoutUpdateMetadata$outboundSchema: z.ZodType<CheckoutUpdateMetadata$Outbound, z.ZodTypeDef, CheckoutUpdateMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutUpdateMetadata$ {
    /** @deprecated use `CheckoutUpdateMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutUpdateMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutUpdateMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutUpdateMetadata$Outbound, z.ZodTypeDef, CheckoutUpdateMetadata>;
    /** @deprecated use `CheckoutUpdateMetadata$Outbound` instead. */
    type Outbound = CheckoutUpdateMetadata$Outbound;
}
export declare function checkoutUpdateMetadataToJSON(checkoutUpdateMetadata: CheckoutUpdateMetadata): string;
export declare function checkoutUpdateMetadataFromJSON(jsonString: string): SafeParseResult<CheckoutUpdateMetadata, SDKValidationError>;
/** @internal */
export declare const CheckoutUpdate$inboundSchema: z.ZodType<CheckoutUpdate, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutUpdate$Outbound = {
    custom_field_data?: CustomFieldData$Outbound | null | undefined;
    product_price_id?: string | null | undefined;
    amount?: number | null | undefined;
    customer_name?: string | null | undefined;
    customer_email?: string | null | undefined;
    customer_billing_address?: Address$Outbound | null | undefined;
    customer_tax_id?: string | null | undefined;
    metadata?: {
        [k: string]: string | number | boolean;
    } | null | undefined;
    discount_id?: string | null | undefined;
    allow_discount_codes?: boolean | null | undefined;
    customer_ip_address?: string | null | undefined;
    success_url?: string | null | undefined;
    embed_origin?: string | null | undefined;
};
/** @internal */
export declare const CheckoutUpdate$outboundSchema: z.ZodType<CheckoutUpdate$Outbound, z.ZodTypeDef, CheckoutUpdate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutUpdate$ {
    /** @deprecated use `CheckoutUpdate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutUpdate, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutUpdate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutUpdate$Outbound, z.ZodTypeDef, CheckoutUpdate>;
    /** @deprecated use `CheckoutUpdate$Outbound` instead. */
    type Outbound = CheckoutUpdate$Outbound;
}
export declare function checkoutUpdateToJSON(checkoutUpdate: CheckoutUpdate): string;
export declare function checkoutUpdateFromJSON(jsonString: string): SafeParseResult<CheckoutUpdate, SDKValidationError>;
//# sourceMappingURL=checkoutupdate.d.ts.map