import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { CustomFieldDateProperties, CustomFieldDateProperties$Outbound } from "./customfielddateproperties.js";
export type CustomFieldCreateDateMetadata = string | number | boolean;
export declare const CustomFieldCreateDateType: {
    readonly Date: "date";
};
export type CustomFieldCreateDateType = ClosedEnum<typeof CustomFieldCreateDateType>;
/**
 * Schema to create a custom field of type date.
 */
export type CustomFieldCreateDate = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    type?: "date" | undefined;
    /**
     * Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens.
     */
    slug: string;
    /**
     * Name of the custom field.
     */
    name: string;
    /**
     * The ID of the organization owning the custom field. **Required unless you use an organization token.**
     */
    organizationId?: string | null | undefined;
    properties: CustomFieldDateProperties;
};
/** @internal */
export declare const CustomFieldCreateDateMetadata$inboundSchema: z.ZodType<CustomFieldCreateDateMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldCreateDateMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const CustomFieldCreateDateMetadata$outboundSchema: z.ZodType<CustomFieldCreateDateMetadata$Outbound, z.ZodTypeDef, CustomFieldCreateDateMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldCreateDateMetadata$ {
    /** @deprecated use `CustomFieldCreateDateMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldCreateDateMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldCreateDateMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldCreateDateMetadata$Outbound, z.ZodTypeDef, CustomFieldCreateDateMetadata>;
    /** @deprecated use `CustomFieldCreateDateMetadata$Outbound` instead. */
    type Outbound = CustomFieldCreateDateMetadata$Outbound;
}
export declare function customFieldCreateDateMetadataToJSON(customFieldCreateDateMetadata: CustomFieldCreateDateMetadata): string;
export declare function customFieldCreateDateMetadataFromJSON(jsonString: string): SafeParseResult<CustomFieldCreateDateMetadata, SDKValidationError>;
/** @internal */
export declare const CustomFieldCreateDateType$inboundSchema: z.ZodNativeEnum<typeof CustomFieldCreateDateType>;
/** @internal */
export declare const CustomFieldCreateDateType$outboundSchema: z.ZodNativeEnum<typeof CustomFieldCreateDateType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldCreateDateType$ {
    /** @deprecated use `CustomFieldCreateDateType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Date: "date";
    }>;
    /** @deprecated use `CustomFieldCreateDateType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Date: "date";
    }>;
}
/** @internal */
export declare const CustomFieldCreateDate$inboundSchema: z.ZodType<CustomFieldCreateDate, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldCreateDate$Outbound = {
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    type: "date";
    slug: string;
    name: string;
    organization_id?: string | null | undefined;
    properties: CustomFieldDateProperties$Outbound;
};
/** @internal */
export declare const CustomFieldCreateDate$outboundSchema: z.ZodType<CustomFieldCreateDate$Outbound, z.ZodTypeDef, CustomFieldCreateDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldCreateDate$ {
    /** @deprecated use `CustomFieldCreateDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldCreateDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldCreateDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldCreateDate$Outbound, z.ZodTypeDef, CustomFieldCreateDate>;
    /** @deprecated use `CustomFieldCreateDate$Outbound` instead. */
    type Outbound = CustomFieldCreateDate$Outbound;
}
export declare function customFieldCreateDateToJSON(customFieldCreateDate: CustomFieldCreateDate): string;
export declare function customFieldCreateDateFromJSON(jsonString: string): SafeParseResult<CustomFieldCreateDate, SDKValidationError>;
//# sourceMappingURL=customfieldcreatedate.d.ts.map