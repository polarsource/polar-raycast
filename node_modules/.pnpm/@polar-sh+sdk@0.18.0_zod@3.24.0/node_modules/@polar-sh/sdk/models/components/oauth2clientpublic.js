"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAuth2ClientPublic$ = exports.OAuth2ClientPublic$outboundSchema = exports.OAuth2ClientPublic$inboundSchema = void 0;
exports.oAuth2ClientPublicToJSON = oAuth2ClientPublicToJSON;
exports.oAuth2ClientPublicFromJSON = oAuth2ClientPublicFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/** @internal */
exports.OAuth2ClientPublic$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    client_id: z.string(),
    client_name: z.nullable(z.string()),
    client_uri: z.nullable(z.string()),
    logo_uri: z.nullable(z.string()),
    tos_uri: z.nullable(z.string()),
    policy_uri: z.nullable(z.string()),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "client_id": "clientId",
        "client_name": "clientName",
        "client_uri": "clientUri",
        "logo_uri": "logoUri",
        "tos_uri": "tosUri",
        "policy_uri": "policyUri",
    });
});
/** @internal */
exports.OAuth2ClientPublic$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    clientId: z.string(),
    clientName: z.nullable(z.string()),
    clientUri: z.nullable(z.string()),
    logoUri: z.nullable(z.string()),
    tosUri: z.nullable(z.string()),
    policyUri: z.nullable(z.string()),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        clientId: "client_id",
        clientName: "client_name",
        clientUri: "client_uri",
        logoUri: "logo_uri",
        tosUri: "tos_uri",
        policyUri: "policy_uri",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OAuth2ClientPublic$;
(function (OAuth2ClientPublic$) {
    /** @deprecated use `OAuth2ClientPublic$inboundSchema` instead. */
    OAuth2ClientPublic$.inboundSchema = exports.OAuth2ClientPublic$inboundSchema;
    /** @deprecated use `OAuth2ClientPublic$outboundSchema` instead. */
    OAuth2ClientPublic$.outboundSchema = exports.OAuth2ClientPublic$outboundSchema;
})(OAuth2ClientPublic$ || (exports.OAuth2ClientPublic$ = OAuth2ClientPublic$ = {}));
function oAuth2ClientPublicToJSON(oAuth2ClientPublic) {
    return JSON.stringify(exports.OAuth2ClientPublic$outboundSchema.parse(oAuth2ClientPublic));
}
function oAuth2ClientPublicFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.OAuth2ClientPublic$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OAuth2ClientPublic' from JSON`);
}
//# sourceMappingURL=oauth2clientpublic.js.map