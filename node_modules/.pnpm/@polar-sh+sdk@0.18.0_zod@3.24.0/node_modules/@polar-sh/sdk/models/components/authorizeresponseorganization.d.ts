import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { AuthorizeOrganization, AuthorizeOrganization$Outbound } from "./authorizeorganization.js";
import { OAuth2ClientPublic, OAuth2ClientPublic$Outbound } from "./oauth2clientpublic.js";
import { Scope } from "./scope.js";
export declare const AuthorizeResponseOrganizationSubType: {
    readonly Organization: "organization";
};
export type AuthorizeResponseOrganizationSubType = ClosedEnum<typeof AuthorizeResponseOrganizationSubType>;
export type AuthorizeResponseOrganization = {
    client: OAuth2ClientPublic;
    subType?: "organization" | undefined;
    sub: AuthorizeOrganization | null;
    scopes: Array<Scope>;
    organizations: Array<AuthorizeOrganization>;
};
/** @internal */
export declare const AuthorizeResponseOrganizationSubType$inboundSchema: z.ZodNativeEnum<typeof AuthorizeResponseOrganizationSubType>;
/** @internal */
export declare const AuthorizeResponseOrganizationSubType$outboundSchema: z.ZodNativeEnum<typeof AuthorizeResponseOrganizationSubType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AuthorizeResponseOrganizationSubType$ {
    /** @deprecated use `AuthorizeResponseOrganizationSubType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Organization: "organization";
    }>;
    /** @deprecated use `AuthorizeResponseOrganizationSubType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Organization: "organization";
    }>;
}
/** @internal */
export declare const AuthorizeResponseOrganization$inboundSchema: z.ZodType<AuthorizeResponseOrganization, z.ZodTypeDef, unknown>;
/** @internal */
export type AuthorizeResponseOrganization$Outbound = {
    client: OAuth2ClientPublic$Outbound;
    sub_type: "organization";
    sub: AuthorizeOrganization$Outbound | null;
    scopes: Array<string>;
    organizations: Array<AuthorizeOrganization$Outbound>;
};
/** @internal */
export declare const AuthorizeResponseOrganization$outboundSchema: z.ZodType<AuthorizeResponseOrganization$Outbound, z.ZodTypeDef, AuthorizeResponseOrganization>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AuthorizeResponseOrganization$ {
    /** @deprecated use `AuthorizeResponseOrganization$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AuthorizeResponseOrganization, z.ZodTypeDef, unknown>;
    /** @deprecated use `AuthorizeResponseOrganization$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AuthorizeResponseOrganization$Outbound, z.ZodTypeDef, AuthorizeResponseOrganization>;
    /** @deprecated use `AuthorizeResponseOrganization$Outbound` instead. */
    type Outbound = AuthorizeResponseOrganization$Outbound;
}
export declare function authorizeResponseOrganizationToJSON(authorizeResponseOrganization: AuthorizeResponseOrganization): string;
export declare function authorizeResponseOrganizationFromJSON(jsonString: string): SafeParseResult<AuthorizeResponseOrganization, SDKValidationError>;
//# sourceMappingURL=authorizeresponseorganization.d.ts.map