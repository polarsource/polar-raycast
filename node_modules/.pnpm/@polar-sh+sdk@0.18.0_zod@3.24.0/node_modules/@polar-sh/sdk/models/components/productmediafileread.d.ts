import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export declare const Service: {
    readonly ProductMedia: "product_media";
};
export type Service = ClosedEnum<typeof Service>;
/**
 * File to be used as a product media file.
 */
export type ProductMediaFileRead = {
    /**
     * The ID of the object.
     */
    id: string;
    organizationId: string;
    name: string;
    path: string;
    mimeType: string;
    size: number;
    storageVersion: string | null;
    checksumEtag: string | null;
    checksumSha256Base64: string | null;
    checksumSha256Hex: string | null;
    lastModifiedAt: Date | null;
    version: string | null;
    service?: "product_media" | undefined;
    isUploaded: boolean;
    createdAt: Date;
    sizeReadable: string;
    publicUrl: string;
};
/** @internal */
export declare const Service$inboundSchema: z.ZodNativeEnum<typeof Service>;
/** @internal */
export declare const Service$outboundSchema: z.ZodNativeEnum<typeof Service>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Service$ {
    /** @deprecated use `Service$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly ProductMedia: "product_media";
    }>;
    /** @deprecated use `Service$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly ProductMedia: "product_media";
    }>;
}
/** @internal */
export declare const ProductMediaFileRead$inboundSchema: z.ZodType<ProductMediaFileRead, z.ZodTypeDef, unknown>;
/** @internal */
export type ProductMediaFileRead$Outbound = {
    id: string;
    organization_id: string;
    name: string;
    path: string;
    mime_type: string;
    size: number;
    storage_version: string | null;
    checksum_etag: string | null;
    checksum_sha256_base64: string | null;
    checksum_sha256_hex: string | null;
    last_modified_at: string | null;
    version: string | null;
    service: "product_media";
    is_uploaded: boolean;
    created_at: string;
    size_readable: string;
    public_url: string;
};
/** @internal */
export declare const ProductMediaFileRead$outboundSchema: z.ZodType<ProductMediaFileRead$Outbound, z.ZodTypeDef, ProductMediaFileRead>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProductMediaFileRead$ {
    /** @deprecated use `ProductMediaFileRead$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProductMediaFileRead, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProductMediaFileRead$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProductMediaFileRead$Outbound, z.ZodTypeDef, ProductMediaFileRead>;
    /** @deprecated use `ProductMediaFileRead$Outbound` instead. */
    type Outbound = ProductMediaFileRead$Outbound;
}
export declare function productMediaFileReadToJSON(productMediaFileRead: ProductMediaFileRead): string;
export declare function productMediaFileReadFromJSON(jsonString: string): SafeParseResult<ProductMediaFileRead, SDKValidationError>;
//# sourceMappingURL=productmediafileread.d.ts.map