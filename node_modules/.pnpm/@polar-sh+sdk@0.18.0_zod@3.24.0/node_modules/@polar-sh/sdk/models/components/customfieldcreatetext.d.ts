import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { CustomFieldTextProperties, CustomFieldTextProperties$Outbound } from "./customfieldtextproperties.js";
export type CustomFieldCreateTextMetadata = string | number | boolean;
export declare const CustomFieldCreateTextType: {
    readonly Text: "text";
};
export type CustomFieldCreateTextType = ClosedEnum<typeof CustomFieldCreateTextType>;
/**
 * Schema to create a custom field of type text.
 */
export type CustomFieldCreateText = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    type?: "text" | undefined;
    /**
     * Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens.
     */
    slug: string;
    /**
     * Name of the custom field.
     */
    name: string;
    /**
     * The ID of the organization owning the custom field. **Required unless you use an organization token.**
     */
    organizationId?: string | null | undefined;
    properties: CustomFieldTextProperties;
};
/** @internal */
export declare const CustomFieldCreateTextMetadata$inboundSchema: z.ZodType<CustomFieldCreateTextMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldCreateTextMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const CustomFieldCreateTextMetadata$outboundSchema: z.ZodType<CustomFieldCreateTextMetadata$Outbound, z.ZodTypeDef, CustomFieldCreateTextMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldCreateTextMetadata$ {
    /** @deprecated use `CustomFieldCreateTextMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldCreateTextMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldCreateTextMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldCreateTextMetadata$Outbound, z.ZodTypeDef, CustomFieldCreateTextMetadata>;
    /** @deprecated use `CustomFieldCreateTextMetadata$Outbound` instead. */
    type Outbound = CustomFieldCreateTextMetadata$Outbound;
}
export declare function customFieldCreateTextMetadataToJSON(customFieldCreateTextMetadata: CustomFieldCreateTextMetadata): string;
export declare function customFieldCreateTextMetadataFromJSON(jsonString: string): SafeParseResult<CustomFieldCreateTextMetadata, SDKValidationError>;
/** @internal */
export declare const CustomFieldCreateTextType$inboundSchema: z.ZodNativeEnum<typeof CustomFieldCreateTextType>;
/** @internal */
export declare const CustomFieldCreateTextType$outboundSchema: z.ZodNativeEnum<typeof CustomFieldCreateTextType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldCreateTextType$ {
    /** @deprecated use `CustomFieldCreateTextType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Text: "text";
    }>;
    /** @deprecated use `CustomFieldCreateTextType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Text: "text";
    }>;
}
/** @internal */
export declare const CustomFieldCreateText$inboundSchema: z.ZodType<CustomFieldCreateText, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldCreateText$Outbound = {
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    type: "text";
    slug: string;
    name: string;
    organization_id?: string | null | undefined;
    properties: CustomFieldTextProperties$Outbound;
};
/** @internal */
export declare const CustomFieldCreateText$outboundSchema: z.ZodType<CustomFieldCreateText$Outbound, z.ZodTypeDef, CustomFieldCreateText>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldCreateText$ {
    /** @deprecated use `CustomFieldCreateText$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldCreateText, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldCreateText$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldCreateText$Outbound, z.ZodTypeDef, CustomFieldCreateText>;
    /** @deprecated use `CustomFieldCreateText$Outbound` instead. */
    type Outbound = CustomFieldCreateText$Outbound;
}
export declare function customFieldCreateTextToJSON(customFieldCreateText: CustomFieldCreateText): string;
export declare function customFieldCreateTextFromJSON(jsonString: string): SafeParseResult<CustomFieldCreateText, SDKValidationError>;
//# sourceMappingURL=customfieldcreatetext.d.ts.map