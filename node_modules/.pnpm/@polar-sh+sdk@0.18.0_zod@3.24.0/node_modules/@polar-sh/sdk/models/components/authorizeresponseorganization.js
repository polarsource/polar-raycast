"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthorizeResponseOrganization$ = exports.AuthorizeResponseOrganization$outboundSchema = exports.AuthorizeResponseOrganization$inboundSchema = exports.AuthorizeResponseOrganizationSubType$ = exports.AuthorizeResponseOrganizationSubType$outboundSchema = exports.AuthorizeResponseOrganizationSubType$inboundSchema = exports.AuthorizeResponseOrganizationSubType = void 0;
exports.authorizeResponseOrganizationToJSON = authorizeResponseOrganizationToJSON;
exports.authorizeResponseOrganizationFromJSON = authorizeResponseOrganizationFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const authorizeorganization_js_1 = require("./authorizeorganization.js");
const oauth2clientpublic_js_1 = require("./oauth2clientpublic.js");
const scope_js_1 = require("./scope.js");
exports.AuthorizeResponseOrganizationSubType = {
    Organization: "organization",
};
/** @internal */
exports.AuthorizeResponseOrganizationSubType$inboundSchema = z.nativeEnum(exports.AuthorizeResponseOrganizationSubType);
/** @internal */
exports.AuthorizeResponseOrganizationSubType$outboundSchema = exports.AuthorizeResponseOrganizationSubType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AuthorizeResponseOrganizationSubType$;
(function (AuthorizeResponseOrganizationSubType$) {
    /** @deprecated use `AuthorizeResponseOrganizationSubType$inboundSchema` instead. */
    AuthorizeResponseOrganizationSubType$.inboundSchema = exports.AuthorizeResponseOrganizationSubType$inboundSchema;
    /** @deprecated use `AuthorizeResponseOrganizationSubType$outboundSchema` instead. */
    AuthorizeResponseOrganizationSubType$.outboundSchema = exports.AuthorizeResponseOrganizationSubType$outboundSchema;
})(AuthorizeResponseOrganizationSubType$ || (exports.AuthorizeResponseOrganizationSubType$ = AuthorizeResponseOrganizationSubType$ = {}));
/** @internal */
exports.AuthorizeResponseOrganization$inboundSchema = z.object({
    client: oauth2clientpublic_js_1.OAuth2ClientPublic$inboundSchema,
    sub_type: z.literal("organization").optional(),
    sub: z.nullable(authorizeorganization_js_1.AuthorizeOrganization$inboundSchema),
    scopes: z.array(scope_js_1.Scope$inboundSchema),
    organizations: z.array(authorizeorganization_js_1.AuthorizeOrganization$inboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "sub_type": "subType",
    });
});
/** @internal */
exports.AuthorizeResponseOrganization$outboundSchema = z.object({
    client: oauth2clientpublic_js_1.OAuth2ClientPublic$outboundSchema,
    subType: z.literal("organization").default("organization"),
    sub: z.nullable(authorizeorganization_js_1.AuthorizeOrganization$outboundSchema),
    scopes: z.array(scope_js_1.Scope$outboundSchema),
    organizations: z.array(authorizeorganization_js_1.AuthorizeOrganization$outboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        subType: "sub_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AuthorizeResponseOrganization$;
(function (AuthorizeResponseOrganization$) {
    /** @deprecated use `AuthorizeResponseOrganization$inboundSchema` instead. */
    AuthorizeResponseOrganization$.inboundSchema = exports.AuthorizeResponseOrganization$inboundSchema;
    /** @deprecated use `AuthorizeResponseOrganization$outboundSchema` instead. */
    AuthorizeResponseOrganization$.outboundSchema = exports.AuthorizeResponseOrganization$outboundSchema;
})(AuthorizeResponseOrganization$ || (exports.AuthorizeResponseOrganization$ = AuthorizeResponseOrganization$ = {}));
function authorizeResponseOrganizationToJSON(authorizeResponseOrganization) {
    return JSON.stringify(exports.AuthorizeResponseOrganization$outboundSchema.parse(authorizeResponseOrganization));
}
function authorizeResponseOrganizationFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AuthorizeResponseOrganization$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AuthorizeResponseOrganization' from JSON`);
}
//# sourceMappingURL=authorizeresponseorganization.js.map