"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthorizeResponseUser$ = exports.AuthorizeResponseUser$outboundSchema = exports.AuthorizeResponseUser$inboundSchema = exports.AuthorizeResponseUserSubType$ = exports.AuthorizeResponseUserSubType$outboundSchema = exports.AuthorizeResponseUserSubType$inboundSchema = exports.AuthorizeResponseUserSubType = void 0;
exports.authorizeResponseUserToJSON = authorizeResponseUserToJSON;
exports.authorizeResponseUserFromJSON = authorizeResponseUserFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const authorizeuser_js_1 = require("./authorizeuser.js");
const oauth2clientpublic_js_1 = require("./oauth2clientpublic.js");
const scope_js_1 = require("./scope.js");
exports.AuthorizeResponseUserSubType = {
    User: "user",
};
/** @internal */
exports.AuthorizeResponseUserSubType$inboundSchema = z.nativeEnum(exports.AuthorizeResponseUserSubType);
/** @internal */
exports.AuthorizeResponseUserSubType$outboundSchema = exports.AuthorizeResponseUserSubType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AuthorizeResponseUserSubType$;
(function (AuthorizeResponseUserSubType$) {
    /** @deprecated use `AuthorizeResponseUserSubType$inboundSchema` instead. */
    AuthorizeResponseUserSubType$.inboundSchema = exports.AuthorizeResponseUserSubType$inboundSchema;
    /** @deprecated use `AuthorizeResponseUserSubType$outboundSchema` instead. */
    AuthorizeResponseUserSubType$.outboundSchema = exports.AuthorizeResponseUserSubType$outboundSchema;
})(AuthorizeResponseUserSubType$ || (exports.AuthorizeResponseUserSubType$ = AuthorizeResponseUserSubType$ = {}));
/** @internal */
exports.AuthorizeResponseUser$inboundSchema = z.object({
    client: oauth2clientpublic_js_1.OAuth2ClientPublic$inboundSchema,
    sub_type: z.literal("user").optional(),
    sub: z.nullable(authorizeuser_js_1.AuthorizeUser$inboundSchema),
    scopes: z.array(scope_js_1.Scope$inboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "sub_type": "subType",
    });
});
/** @internal */
exports.AuthorizeResponseUser$outboundSchema = z.object({
    client: oauth2clientpublic_js_1.OAuth2ClientPublic$outboundSchema,
    subType: z.literal("user").default("user"),
    sub: z.nullable(authorizeuser_js_1.AuthorizeUser$outboundSchema),
    scopes: z.array(scope_js_1.Scope$outboundSchema),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        subType: "sub_type",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var AuthorizeResponseUser$;
(function (AuthorizeResponseUser$) {
    /** @deprecated use `AuthorizeResponseUser$inboundSchema` instead. */
    AuthorizeResponseUser$.inboundSchema = exports.AuthorizeResponseUser$inboundSchema;
    /** @deprecated use `AuthorizeResponseUser$outboundSchema` instead. */
    AuthorizeResponseUser$.outboundSchema = exports.AuthorizeResponseUser$outboundSchema;
})(AuthorizeResponseUser$ || (exports.AuthorizeResponseUser$ = AuthorizeResponseUser$ = {}));
function authorizeResponseUserToJSON(authorizeResponseUser) {
    return JSON.stringify(exports.AuthorizeResponseUser$outboundSchema.parse(authorizeResponseUser));
}
function authorizeResponseUserFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AuthorizeResponseUser$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AuthorizeResponseUser' from JSON`);
}
//# sourceMappingURL=authorizeresponseuser.js.map