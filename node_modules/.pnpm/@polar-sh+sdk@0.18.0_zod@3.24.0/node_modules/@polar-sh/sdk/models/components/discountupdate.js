"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiscountUpdate$ = exports.DiscountUpdate$outboundSchema = exports.DiscountUpdate$inboundSchema = exports.DiscountUpdateMetadata$ = exports.DiscountUpdateMetadata$outboundSchema = exports.DiscountUpdateMetadata$inboundSchema = void 0;
exports.discountUpdateMetadataToJSON = discountUpdateMetadataToJSON;
exports.discountUpdateMetadataFromJSON = discountUpdateMetadataFromJSON;
exports.discountUpdateToJSON = discountUpdateToJSON;
exports.discountUpdateFromJSON = discountUpdateFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const discountduration_js_1 = require("./discountduration.js");
const discounttype_js_1 = require("./discounttype.js");
/** @internal */
exports.DiscountUpdateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
exports.DiscountUpdateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DiscountUpdateMetadata$;
(function (DiscountUpdateMetadata$) {
    /** @deprecated use `DiscountUpdateMetadata$inboundSchema` instead. */
    DiscountUpdateMetadata$.inboundSchema = exports.DiscountUpdateMetadata$inboundSchema;
    /** @deprecated use `DiscountUpdateMetadata$outboundSchema` instead. */
    DiscountUpdateMetadata$.outboundSchema = exports.DiscountUpdateMetadata$outboundSchema;
})(DiscountUpdateMetadata$ || (exports.DiscountUpdateMetadata$ = DiscountUpdateMetadata$ = {}));
function discountUpdateMetadataToJSON(discountUpdateMetadata) {
    return JSON.stringify(exports.DiscountUpdateMetadata$outboundSchema.parse(discountUpdateMetadata));
}
function discountUpdateMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DiscountUpdateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DiscountUpdateMetadata' from JSON`);
}
/** @internal */
exports.DiscountUpdate$inboundSchema = z.object({
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    name: z.nullable(z.string()).optional(),
    code: z.nullable(z.string()).optional(),
    starts_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    ends_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    max_redemptions: z.nullable(z.number().int()).optional(),
    duration: z.nullable(discountduration_js_1.DiscountDuration$inboundSchema).optional(),
    duration_in_months: z.nullable(z.number().int()).optional(),
    type: z.nullable(discounttype_js_1.DiscountType$inboundSchema).optional(),
    amount: z.nullable(z.number().int()).optional(),
    currency: z.nullable(z.string().default("usd")),
    basis_points: z.nullable(z.number().int()).optional(),
    products: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "starts_at": "startsAt",
        "ends_at": "endsAt",
        "max_redemptions": "maxRedemptions",
        "duration_in_months": "durationInMonths",
        "basis_points": "basisPoints",
    });
});
/** @internal */
exports.DiscountUpdate$outboundSchema = z.object({
    metadata: z.nullable(z.record(z.union([z.string(), z.number().int(), z.boolean()]))).optional(),
    name: z.nullable(z.string()).optional(),
    code: z.nullable(z.string()).optional(),
    startsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    endsAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    maxRedemptions: z.nullable(z.number().int()).optional(),
    duration: z.nullable(discountduration_js_1.DiscountDuration$outboundSchema).optional(),
    durationInMonths: z.nullable(z.number().int()).optional(),
    type: z.nullable(discounttype_js_1.DiscountType$outboundSchema).optional(),
    amount: z.nullable(z.number().int()).optional(),
    currency: z.nullable(z.string().default("usd")),
    basisPoints: z.nullable(z.number().int()).optional(),
    products: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        startsAt: "starts_at",
        endsAt: "ends_at",
        maxRedemptions: "max_redemptions",
        durationInMonths: "duration_in_months",
        basisPoints: "basis_points",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DiscountUpdate$;
(function (DiscountUpdate$) {
    /** @deprecated use `DiscountUpdate$inboundSchema` instead. */
    DiscountUpdate$.inboundSchema = exports.DiscountUpdate$inboundSchema;
    /** @deprecated use `DiscountUpdate$outboundSchema` instead. */
    DiscountUpdate$.outboundSchema = exports.DiscountUpdate$outboundSchema;
})(DiscountUpdate$ || (exports.DiscountUpdate$ = DiscountUpdate$ = {}));
function discountUpdateToJSON(discountUpdate) {
    return JSON.stringify(exports.DiscountUpdate$outboundSchema.parse(discountUpdate));
}
function discountUpdateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DiscountUpdate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DiscountUpdate' from JSON`);
}
//# sourceMappingURL=discountupdate.js.map