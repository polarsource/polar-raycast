import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { CustomFieldDateProperties, CustomFieldDateProperties$Outbound } from "./customfielddateproperties.js";
export type CustomFieldDateMetadata = string | number | boolean;
export declare const CustomFieldDateType: {
    readonly Date: "date";
};
export type CustomFieldDateType = ClosedEnum<typeof CustomFieldDateType>;
/**
 * Schema for a custom field of type date.
 */
export type CustomFieldDate = {
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the object.
     */
    id: string;
    metadata: {
        [k: string]: string | number | boolean;
    };
    type?: "date" | undefined;
    /**
     * Identifier of the custom field. It'll be used as key when storing the value.
     */
    slug: string;
    /**
     * Name of the custom field.
     */
    name: string;
    /**
     * The ID of the organization owning the custom field.
     */
    organizationId: string;
    properties: CustomFieldDateProperties;
};
/** @internal */
export declare const CustomFieldDateMetadata$inboundSchema: z.ZodType<CustomFieldDateMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldDateMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const CustomFieldDateMetadata$outboundSchema: z.ZodType<CustomFieldDateMetadata$Outbound, z.ZodTypeDef, CustomFieldDateMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldDateMetadata$ {
    /** @deprecated use `CustomFieldDateMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldDateMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldDateMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldDateMetadata$Outbound, z.ZodTypeDef, CustomFieldDateMetadata>;
    /** @deprecated use `CustomFieldDateMetadata$Outbound` instead. */
    type Outbound = CustomFieldDateMetadata$Outbound;
}
export declare function customFieldDateMetadataToJSON(customFieldDateMetadata: CustomFieldDateMetadata): string;
export declare function customFieldDateMetadataFromJSON(jsonString: string): SafeParseResult<CustomFieldDateMetadata, SDKValidationError>;
/** @internal */
export declare const CustomFieldDateType$inboundSchema: z.ZodNativeEnum<typeof CustomFieldDateType>;
/** @internal */
export declare const CustomFieldDateType$outboundSchema: z.ZodNativeEnum<typeof CustomFieldDateType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldDateType$ {
    /** @deprecated use `CustomFieldDateType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Date: "date";
    }>;
    /** @deprecated use `CustomFieldDateType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Date: "date";
    }>;
}
/** @internal */
export declare const CustomFieldDate$inboundSchema: z.ZodType<CustomFieldDate, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldDate$Outbound = {
    created_at: string;
    modified_at: string | null;
    id: string;
    metadata: {
        [k: string]: string | number | boolean;
    };
    type: "date";
    slug: string;
    name: string;
    organization_id: string;
    properties: CustomFieldDateProperties$Outbound;
};
/** @internal */
export declare const CustomFieldDate$outboundSchema: z.ZodType<CustomFieldDate$Outbound, z.ZodTypeDef, CustomFieldDate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldDate$ {
    /** @deprecated use `CustomFieldDate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldDate, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldDate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldDate$Outbound, z.ZodTypeDef, CustomFieldDate>;
    /** @deprecated use `CustomFieldDate$Outbound` instead. */
    type Outbound = CustomFieldDate$Outbound;
}
export declare function customFieldDateToJSON(customFieldDate: CustomFieldDate): string;
export declare function customFieldDateFromJSON(jsonString: string): SafeParseResult<CustomFieldDate, SDKValidationError>;
//# sourceMappingURL=customfielddate.d.ts.map