import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { CustomFieldTextProperties, CustomFieldTextProperties$Outbound } from "./customfieldtextproperties.js";
export type CustomFieldTextMetadata = string | number | boolean;
export declare const CustomFieldTextType: {
    readonly Text: "text";
};
export type CustomFieldTextType = ClosedEnum<typeof CustomFieldTextType>;
/**
 * Schema for a custom field of type text.
 */
export type CustomFieldText = {
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the object.
     */
    id: string;
    metadata: {
        [k: string]: string | number | boolean;
    };
    type?: "text" | undefined;
    /**
     * Identifier of the custom field. It'll be used as key when storing the value.
     */
    slug: string;
    /**
     * Name of the custom field.
     */
    name: string;
    /**
     * The ID of the organization owning the custom field.
     */
    organizationId: string;
    properties: CustomFieldTextProperties;
};
/** @internal */
export declare const CustomFieldTextMetadata$inboundSchema: z.ZodType<CustomFieldTextMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldTextMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const CustomFieldTextMetadata$outboundSchema: z.ZodType<CustomFieldTextMetadata$Outbound, z.ZodTypeDef, CustomFieldTextMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldTextMetadata$ {
    /** @deprecated use `CustomFieldTextMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldTextMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldTextMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldTextMetadata$Outbound, z.ZodTypeDef, CustomFieldTextMetadata>;
    /** @deprecated use `CustomFieldTextMetadata$Outbound` instead. */
    type Outbound = CustomFieldTextMetadata$Outbound;
}
export declare function customFieldTextMetadataToJSON(customFieldTextMetadata: CustomFieldTextMetadata): string;
export declare function customFieldTextMetadataFromJSON(jsonString: string): SafeParseResult<CustomFieldTextMetadata, SDKValidationError>;
/** @internal */
export declare const CustomFieldTextType$inboundSchema: z.ZodNativeEnum<typeof CustomFieldTextType>;
/** @internal */
export declare const CustomFieldTextType$outboundSchema: z.ZodNativeEnum<typeof CustomFieldTextType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldTextType$ {
    /** @deprecated use `CustomFieldTextType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Text: "text";
    }>;
    /** @deprecated use `CustomFieldTextType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Text: "text";
    }>;
}
/** @internal */
export declare const CustomFieldText$inboundSchema: z.ZodType<CustomFieldText, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldText$Outbound = {
    created_at: string;
    modified_at: string | null;
    id: string;
    metadata: {
        [k: string]: string | number | boolean;
    };
    type: "text";
    slug: string;
    name: string;
    organization_id: string;
    properties: CustomFieldTextProperties$Outbound;
};
/** @internal */
export declare const CustomFieldText$outboundSchema: z.ZodType<CustomFieldText$Outbound, z.ZodTypeDef, CustomFieldText>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldText$ {
    /** @deprecated use `CustomFieldText$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldText, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldText$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldText$Outbound, z.ZodTypeDef, CustomFieldText>;
    /** @deprecated use `CustomFieldText$Outbound` instead. */
    type Outbound = CustomFieldText$Outbound;
}
export declare function customFieldTextToJSON(customFieldText: CustomFieldText): string;
export declare function customFieldTextFromJSON(jsonString: string): SafeParseResult<CustomFieldText, SDKValidationError>;
//# sourceMappingURL=customfieldtext.d.ts.map