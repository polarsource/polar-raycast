import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { AttachedCustomFieldCreate, AttachedCustomFieldCreate$Outbound } from "./attachedcustomfieldcreate.js";
import { ProductPriceOneTimeCustomCreate, ProductPriceOneTimeCustomCreate$Outbound } from "./productpriceonetimecustomcreate.js";
import { ProductPriceOneTimeFixedCreate, ProductPriceOneTimeFixedCreate$Outbound } from "./productpriceonetimefixedcreate.js";
import { ProductPriceOneTimeFreeCreate, ProductPriceOneTimeFreeCreate$Outbound } from "./productpriceonetimefreecreate.js";
export type ProductOneTimeCreateMetadata = string | number | boolean;
export type Prices = ProductPriceOneTimeFreeCreate | ProductPriceOneTimeFixedCreate | ProductPriceOneTimeCustomCreate;
/**
 * Schema to create a one-time product.
 */
export type ProductOneTimeCreate = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    /**
     * The name of the product.
     */
    name: string;
    /**
     * The description of the product.
     */
    description?: string | null | undefined;
    /**
     * List of available prices for this product.
     */
    prices: Array<ProductPriceOneTimeFreeCreate | ProductPriceOneTimeFixedCreate | ProductPriceOneTimeCustomCreate>;
    /**
     * List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded.
     */
    medias?: Array<string> | null | undefined;
    /**
     * List of custom fields to attach.
     */
    attachedCustomFields?: Array<AttachedCustomFieldCreate> | undefined;
    /**
     * The ID of the organization owning the product. **Required unless you use an organization token.**
     */
    organizationId?: string | null | undefined;
};
/** @internal */
export declare const ProductOneTimeCreateMetadata$inboundSchema: z.ZodType<ProductOneTimeCreateMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type ProductOneTimeCreateMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const ProductOneTimeCreateMetadata$outboundSchema: z.ZodType<ProductOneTimeCreateMetadata$Outbound, z.ZodTypeDef, ProductOneTimeCreateMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProductOneTimeCreateMetadata$ {
    /** @deprecated use `ProductOneTimeCreateMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProductOneTimeCreateMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProductOneTimeCreateMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProductOneTimeCreateMetadata$Outbound, z.ZodTypeDef, ProductOneTimeCreateMetadata>;
    /** @deprecated use `ProductOneTimeCreateMetadata$Outbound` instead. */
    type Outbound = ProductOneTimeCreateMetadata$Outbound;
}
export declare function productOneTimeCreateMetadataToJSON(productOneTimeCreateMetadata: ProductOneTimeCreateMetadata): string;
export declare function productOneTimeCreateMetadataFromJSON(jsonString: string): SafeParseResult<ProductOneTimeCreateMetadata, SDKValidationError>;
/** @internal */
export declare const Prices$inboundSchema: z.ZodType<Prices, z.ZodTypeDef, unknown>;
/** @internal */
export type Prices$Outbound = ProductPriceOneTimeFreeCreate$Outbound | ProductPriceOneTimeFixedCreate$Outbound | ProductPriceOneTimeCustomCreate$Outbound;
/** @internal */
export declare const Prices$outboundSchema: z.ZodType<Prices$Outbound, z.ZodTypeDef, Prices>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Prices$ {
    /** @deprecated use `Prices$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Prices, z.ZodTypeDef, unknown>;
    /** @deprecated use `Prices$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Prices$Outbound, z.ZodTypeDef, Prices>;
    /** @deprecated use `Prices$Outbound` instead. */
    type Outbound = Prices$Outbound;
}
export declare function pricesToJSON(prices: Prices): string;
export declare function pricesFromJSON(jsonString: string): SafeParseResult<Prices, SDKValidationError>;
/** @internal */
export declare const ProductOneTimeCreate$inboundSchema: z.ZodType<ProductOneTimeCreate, z.ZodTypeDef, unknown>;
/** @internal */
export type ProductOneTimeCreate$Outbound = {
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    name: string;
    description?: string | null | undefined;
    prices: Array<ProductPriceOneTimeFreeCreate$Outbound | ProductPriceOneTimeFixedCreate$Outbound | ProductPriceOneTimeCustomCreate$Outbound>;
    medias?: Array<string> | null | undefined;
    attached_custom_fields?: Array<AttachedCustomFieldCreate$Outbound> | undefined;
    organization_id?: string | null | undefined;
};
/** @internal */
export declare const ProductOneTimeCreate$outboundSchema: z.ZodType<ProductOneTimeCreate$Outbound, z.ZodTypeDef, ProductOneTimeCreate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ProductOneTimeCreate$ {
    /** @deprecated use `ProductOneTimeCreate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ProductOneTimeCreate, z.ZodTypeDef, unknown>;
    /** @deprecated use `ProductOneTimeCreate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ProductOneTimeCreate$Outbound, z.ZodTypeDef, ProductOneTimeCreate>;
    /** @deprecated use `ProductOneTimeCreate$Outbound` instead. */
    type Outbound = ProductOneTimeCreate$Outbound;
}
export declare function productOneTimeCreateToJSON(productOneTimeCreate: ProductOneTimeCreate): string;
export declare function productOneTimeCreateFromJSON(jsonString: string): SafeParseResult<ProductOneTimeCreate, SDKValidationError>;
//# sourceMappingURL=productonetimecreate.d.ts.map