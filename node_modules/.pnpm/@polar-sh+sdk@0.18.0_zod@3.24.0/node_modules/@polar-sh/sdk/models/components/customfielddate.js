"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomFieldDate$ = exports.CustomFieldDate$outboundSchema = exports.CustomFieldDate$inboundSchema = exports.CustomFieldDateType$ = exports.CustomFieldDateType$outboundSchema = exports.CustomFieldDateType$inboundSchema = exports.CustomFieldDateMetadata$ = exports.CustomFieldDateMetadata$outboundSchema = exports.CustomFieldDateMetadata$inboundSchema = exports.CustomFieldDateType = void 0;
exports.customFieldDateMetadataToJSON = customFieldDateMetadataToJSON;
exports.customFieldDateMetadataFromJSON = customFieldDateMetadataFromJSON;
exports.customFieldDateToJSON = customFieldDateToJSON;
exports.customFieldDateFromJSON = customFieldDateFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const customfielddateproperties_js_1 = require("./customfielddateproperties.js");
exports.CustomFieldDateType = {
    Date: "date",
};
/** @internal */
exports.CustomFieldDateMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
exports.CustomFieldDateMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomFieldDateMetadata$;
(function (CustomFieldDateMetadata$) {
    /** @deprecated use `CustomFieldDateMetadata$inboundSchema` instead. */
    CustomFieldDateMetadata$.inboundSchema = exports.CustomFieldDateMetadata$inboundSchema;
    /** @deprecated use `CustomFieldDateMetadata$outboundSchema` instead. */
    CustomFieldDateMetadata$.outboundSchema = exports.CustomFieldDateMetadata$outboundSchema;
})(CustomFieldDateMetadata$ || (exports.CustomFieldDateMetadata$ = CustomFieldDateMetadata$ = {}));
function customFieldDateMetadataToJSON(customFieldDateMetadata) {
    return JSON.stringify(exports.CustomFieldDateMetadata$outboundSchema.parse(customFieldDateMetadata));
}
function customFieldDateMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomFieldDateMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldDateMetadata' from JSON`);
}
/** @internal */
exports.CustomFieldDateType$inboundSchema = z.nativeEnum(exports.CustomFieldDateType);
/** @internal */
exports.CustomFieldDateType$outboundSchema = exports.CustomFieldDateType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomFieldDateType$;
(function (CustomFieldDateType$) {
    /** @deprecated use `CustomFieldDateType$inboundSchema` instead. */
    CustomFieldDateType$.inboundSchema = exports.CustomFieldDateType$inboundSchema;
    /** @deprecated use `CustomFieldDateType$outboundSchema` instead. */
    CustomFieldDateType$.outboundSchema = exports.CustomFieldDateType$outboundSchema;
})(CustomFieldDateType$ || (exports.CustomFieldDateType$ = CustomFieldDateType$ = {}));
/** @internal */
exports.CustomFieldDate$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    type: z.literal("date").optional(),
    slug: z.string(),
    name: z.string(),
    organization_id: z.string(),
    properties: customfielddateproperties_js_1.CustomFieldDateProperties$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
exports.CustomFieldDate$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    type: z.literal("date").default("date"),
    slug: z.string(),
    name: z.string(),
    organizationId: z.string(),
    properties: customfielddateproperties_js_1.CustomFieldDateProperties$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomFieldDate$;
(function (CustomFieldDate$) {
    /** @deprecated use `CustomFieldDate$inboundSchema` instead. */
    CustomFieldDate$.inboundSchema = exports.CustomFieldDate$inboundSchema;
    /** @deprecated use `CustomFieldDate$outboundSchema` instead. */
    CustomFieldDate$.outboundSchema = exports.CustomFieldDate$outboundSchema;
})(CustomFieldDate$ || (exports.CustomFieldDate$ = CustomFieldDate$ = {}));
function customFieldDateToJSON(customFieldDate) {
    return JSON.stringify(exports.CustomFieldDate$outboundSchema.parse(customFieldDate));
}
function customFieldDateFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomFieldDate$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldDate' from JSON`);
}
//# sourceMappingURL=customfielddate.js.map