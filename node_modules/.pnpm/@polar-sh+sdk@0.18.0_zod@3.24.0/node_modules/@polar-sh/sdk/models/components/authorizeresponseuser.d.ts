import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { AuthorizeUser, AuthorizeUser$Outbound } from "./authorizeuser.js";
import { OAuth2ClientPublic, OAuth2ClientPublic$Outbound } from "./oauth2clientpublic.js";
import { Scope } from "./scope.js";
export declare const AuthorizeResponseUserSubType: {
    readonly User: "user";
};
export type AuthorizeResponseUserSubType = ClosedEnum<typeof AuthorizeResponseUserSubType>;
export type AuthorizeResponseUser = {
    client: OAuth2ClientPublic;
    subType?: "user" | undefined;
    sub: AuthorizeUser | null;
    scopes: Array<Scope>;
};
/** @internal */
export declare const AuthorizeResponseUserSubType$inboundSchema: z.ZodNativeEnum<typeof AuthorizeResponseUserSubType>;
/** @internal */
export declare const AuthorizeResponseUserSubType$outboundSchema: z.ZodNativeEnum<typeof AuthorizeResponseUserSubType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AuthorizeResponseUserSubType$ {
    /** @deprecated use `AuthorizeResponseUserSubType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
    }>;
    /** @deprecated use `AuthorizeResponseUserSubType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly User: "user";
    }>;
}
/** @internal */
export declare const AuthorizeResponseUser$inboundSchema: z.ZodType<AuthorizeResponseUser, z.ZodTypeDef, unknown>;
/** @internal */
export type AuthorizeResponseUser$Outbound = {
    client: OAuth2ClientPublic$Outbound;
    sub_type: "user";
    sub: AuthorizeUser$Outbound | null;
    scopes: Array<string>;
};
/** @internal */
export declare const AuthorizeResponseUser$outboundSchema: z.ZodType<AuthorizeResponseUser$Outbound, z.ZodTypeDef, AuthorizeResponseUser>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AuthorizeResponseUser$ {
    /** @deprecated use `AuthorizeResponseUser$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AuthorizeResponseUser, z.ZodTypeDef, unknown>;
    /** @deprecated use `AuthorizeResponseUser$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AuthorizeResponseUser$Outbound, z.ZodTypeDef, AuthorizeResponseUser>;
    /** @deprecated use `AuthorizeResponseUser$Outbound` instead. */
    type Outbound = AuthorizeResponseUser$Outbound;
}
export declare function authorizeResponseUserToJSON(authorizeResponseUser: AuthorizeResponseUser): string;
export declare function authorizeResponseUserFromJSON(jsonString: string): SafeParseResult<AuthorizeResponseUser, SDKValidationError>;
//# sourceMappingURL=authorizeresponseuser.d.ts.map