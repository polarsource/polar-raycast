import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { DiscountFixedOnceForeverDurationBase, DiscountFixedOnceForeverDurationBase$Outbound } from "./discountfixedonceforeverdurationbase.js";
import { DiscountFixedRepeatDurationBase, DiscountFixedRepeatDurationBase$Outbound } from "./discountfixedrepeatdurationbase.js";
import { DiscountPercentageOnceForeverDurationBase, DiscountPercentageOnceForeverDurationBase$Outbound } from "./discountpercentageonceforeverdurationbase.js";
import { DiscountPercentageRepeatDurationBase, DiscountPercentageRepeatDurationBase$Outbound } from "./discountpercentagerepeatdurationbase.js";
import { Product, Product$Outbound } from "./product.js";
import { ProductPriceRecurring, ProductPriceRecurring$Outbound } from "./productpricerecurring.js";
import { SubscriptionRecurringInterval } from "./subscriptionrecurringinterval.js";
import { SubscriptionStatus } from "./subscriptionstatus.js";
import { SubscriptionUser, SubscriptionUser$Outbound } from "./subscriptionuser.js";
export type Metadata = string | number | boolean;
/**
 * Key-value object storing custom field values.
 */
export type SubscriptionCustomFieldData = {};
export type SubscriptionDiscount = DiscountPercentageOnceForeverDurationBase | DiscountFixedOnceForeverDurationBase | DiscountPercentageRepeatDurationBase | DiscountFixedRepeatDurationBase;
export type Subscription = {
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the object.
     */
    id: string;
    amount: number | null;
    currency: string | null;
    recurringInterval: SubscriptionRecurringInterval;
    status: SubscriptionStatus;
    currentPeriodStart: Date;
    currentPeriodEnd: Date | null;
    cancelAtPeriodEnd: boolean;
    startedAt: Date | null;
    endedAt: Date | null;
    userId: string;
    productId: string;
    priceId: string;
    discountId: string | null;
    checkoutId: string | null;
    metadata: {
        [k: string]: string | number | boolean;
    };
    /**
     * Key-value object storing custom field values.
     */
    customFieldData?: SubscriptionCustomFieldData | undefined;
    user: SubscriptionUser;
    /**
     * A product.
     */
    product: Product;
    price: ProductPriceRecurring;
    discount: DiscountPercentageOnceForeverDurationBase | DiscountFixedOnceForeverDurationBase | DiscountPercentageRepeatDurationBase | DiscountFixedRepeatDurationBase | null;
};
/** @internal */
export declare const Metadata$inboundSchema: z.ZodType<Metadata, z.ZodTypeDef, unknown>;
/** @internal */
export type Metadata$Outbound = string | number | boolean;
/** @internal */
export declare const Metadata$outboundSchema: z.ZodType<Metadata$Outbound, z.ZodTypeDef, Metadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Metadata$ {
    /** @deprecated use `Metadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Metadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `Metadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Metadata$Outbound, z.ZodTypeDef, Metadata>;
    /** @deprecated use `Metadata$Outbound` instead. */
    type Outbound = Metadata$Outbound;
}
export declare function metadataToJSON(metadata: Metadata): string;
export declare function metadataFromJSON(jsonString: string): SafeParseResult<Metadata, SDKValidationError>;
/** @internal */
export declare const SubscriptionCustomFieldData$inboundSchema: z.ZodType<SubscriptionCustomFieldData, z.ZodTypeDef, unknown>;
/** @internal */
export type SubscriptionCustomFieldData$Outbound = {};
/** @internal */
export declare const SubscriptionCustomFieldData$outboundSchema: z.ZodType<SubscriptionCustomFieldData$Outbound, z.ZodTypeDef, SubscriptionCustomFieldData>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SubscriptionCustomFieldData$ {
    /** @deprecated use `SubscriptionCustomFieldData$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SubscriptionCustomFieldData, z.ZodTypeDef, unknown>;
    /** @deprecated use `SubscriptionCustomFieldData$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SubscriptionCustomFieldData$Outbound, z.ZodTypeDef, SubscriptionCustomFieldData>;
    /** @deprecated use `SubscriptionCustomFieldData$Outbound` instead. */
    type Outbound = SubscriptionCustomFieldData$Outbound;
}
export declare function subscriptionCustomFieldDataToJSON(subscriptionCustomFieldData: SubscriptionCustomFieldData): string;
export declare function subscriptionCustomFieldDataFromJSON(jsonString: string): SafeParseResult<SubscriptionCustomFieldData, SDKValidationError>;
/** @internal */
export declare const SubscriptionDiscount$inboundSchema: z.ZodType<SubscriptionDiscount, z.ZodTypeDef, unknown>;
/** @internal */
export type SubscriptionDiscount$Outbound = DiscountPercentageOnceForeverDurationBase$Outbound | DiscountFixedOnceForeverDurationBase$Outbound | DiscountPercentageRepeatDurationBase$Outbound | DiscountFixedRepeatDurationBase$Outbound;
/** @internal */
export declare const SubscriptionDiscount$outboundSchema: z.ZodType<SubscriptionDiscount$Outbound, z.ZodTypeDef, SubscriptionDiscount>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace SubscriptionDiscount$ {
    /** @deprecated use `SubscriptionDiscount$inboundSchema` instead. */
    const inboundSchema: z.ZodType<SubscriptionDiscount, z.ZodTypeDef, unknown>;
    /** @deprecated use `SubscriptionDiscount$outboundSchema` instead. */
    const outboundSchema: z.ZodType<SubscriptionDiscount$Outbound, z.ZodTypeDef, SubscriptionDiscount>;
    /** @deprecated use `SubscriptionDiscount$Outbound` instead. */
    type Outbound = SubscriptionDiscount$Outbound;
}
export declare function subscriptionDiscountToJSON(subscriptionDiscount: SubscriptionDiscount): string;
export declare function subscriptionDiscountFromJSON(jsonString: string): SafeParseResult<SubscriptionDiscount, SDKValidationError>;
/** @internal */
export declare const Subscription$inboundSchema: z.ZodType<Subscription, z.ZodTypeDef, unknown>;
/** @internal */
export type Subscription$Outbound = {
    created_at: string;
    modified_at: string | null;
    id: string;
    amount: number | null;
    currency: string | null;
    recurring_interval: string;
    status: string;
    current_period_start: string;
    current_period_end: string | null;
    cancel_at_period_end: boolean;
    started_at: string | null;
    ended_at: string | null;
    user_id: string;
    product_id: string;
    price_id: string;
    discount_id: string | null;
    checkout_id: string | null;
    metadata: {
        [k: string]: string | number | boolean;
    };
    custom_field_data?: SubscriptionCustomFieldData$Outbound | undefined;
    user: SubscriptionUser$Outbound;
    product: Product$Outbound;
    price: ProductPriceRecurring$Outbound;
    discount: DiscountPercentageOnceForeverDurationBase$Outbound | DiscountFixedOnceForeverDurationBase$Outbound | DiscountPercentageRepeatDurationBase$Outbound | DiscountFixedRepeatDurationBase$Outbound | null;
};
/** @internal */
export declare const Subscription$outboundSchema: z.ZodType<Subscription$Outbound, z.ZodTypeDef, Subscription>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Subscription$ {
    /** @deprecated use `Subscription$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Subscription, z.ZodTypeDef, unknown>;
    /** @deprecated use `Subscription$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Subscription$Outbound, z.ZodTypeDef, Subscription>;
    /** @deprecated use `Subscription$Outbound` instead. */
    type Outbound = Subscription$Outbound;
}
export declare function subscriptionToJSON(subscription: Subscription): string;
export declare function subscriptionFromJSON(jsonString: string): SafeParseResult<Subscription, SDKValidationError>;
//# sourceMappingURL=subscription.d.ts.map