import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type CheckoutLinkProductCreateMetadata = string | number | boolean;
/**
 * Payment processor to use. Currently only Stripe is supported.
 */
export declare const CheckoutLinkProductCreatePaymentProcessor: {
    readonly Stripe: "stripe";
};
/**
 * Payment processor to use. Currently only Stripe is supported.
 */
export type CheckoutLinkProductCreatePaymentProcessor = ClosedEnum<typeof CheckoutLinkProductCreatePaymentProcessor>;
export type CheckoutLinkProductCreate = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    /**
     * Payment processor to use. Currently only Stripe is supported.
     */
    paymentProcessor?: "stripe" | undefined;
    /**
     * Optional label to distinguish links internally
     */
    label?: string | null | undefined;
    /**
     * Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
     */
    allowDiscountCodes?: boolean | undefined;
    /**
     * ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored.
     */
    discountId?: string | null | undefined;
    /**
     * URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
     */
    successUrl?: string | null | undefined;
    /**
     * ID of the product to checkout. First available price will be selected.
     */
    productId: string;
};
/** @internal */
export declare const CheckoutLinkProductCreateMetadata$inboundSchema: z.ZodType<CheckoutLinkProductCreateMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutLinkProductCreateMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const CheckoutLinkProductCreateMetadata$outboundSchema: z.ZodType<CheckoutLinkProductCreateMetadata$Outbound, z.ZodTypeDef, CheckoutLinkProductCreateMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutLinkProductCreateMetadata$ {
    /** @deprecated use `CheckoutLinkProductCreateMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutLinkProductCreateMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutLinkProductCreateMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutLinkProductCreateMetadata$Outbound, z.ZodTypeDef, CheckoutLinkProductCreateMetadata>;
    /** @deprecated use `CheckoutLinkProductCreateMetadata$Outbound` instead. */
    type Outbound = CheckoutLinkProductCreateMetadata$Outbound;
}
export declare function checkoutLinkProductCreateMetadataToJSON(checkoutLinkProductCreateMetadata: CheckoutLinkProductCreateMetadata): string;
export declare function checkoutLinkProductCreateMetadataFromJSON(jsonString: string): SafeParseResult<CheckoutLinkProductCreateMetadata, SDKValidationError>;
/** @internal */
export declare const CheckoutLinkProductCreatePaymentProcessor$inboundSchema: z.ZodNativeEnum<typeof CheckoutLinkProductCreatePaymentProcessor>;
/** @internal */
export declare const CheckoutLinkProductCreatePaymentProcessor$outboundSchema: z.ZodNativeEnum<typeof CheckoutLinkProductCreatePaymentProcessor>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutLinkProductCreatePaymentProcessor$ {
    /** @deprecated use `CheckoutLinkProductCreatePaymentProcessor$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Stripe: "stripe";
    }>;
    /** @deprecated use `CheckoutLinkProductCreatePaymentProcessor$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Stripe: "stripe";
    }>;
}
/** @internal */
export declare const CheckoutLinkProductCreate$inboundSchema: z.ZodType<CheckoutLinkProductCreate, z.ZodTypeDef, unknown>;
/** @internal */
export type CheckoutLinkProductCreate$Outbound = {
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    payment_processor: "stripe";
    label?: string | null | undefined;
    allow_discount_codes: boolean;
    discount_id?: string | null | undefined;
    success_url?: string | null | undefined;
    product_id: string;
};
/** @internal */
export declare const CheckoutLinkProductCreate$outboundSchema: z.ZodType<CheckoutLinkProductCreate$Outbound, z.ZodTypeDef, CheckoutLinkProductCreate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CheckoutLinkProductCreate$ {
    /** @deprecated use `CheckoutLinkProductCreate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CheckoutLinkProductCreate, z.ZodTypeDef, unknown>;
    /** @deprecated use `CheckoutLinkProductCreate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CheckoutLinkProductCreate$Outbound, z.ZodTypeDef, CheckoutLinkProductCreate>;
    /** @deprecated use `CheckoutLinkProductCreate$Outbound` instead. */
    type Outbound = CheckoutLinkProductCreate$Outbound;
}
export declare function checkoutLinkProductCreateToJSON(checkoutLinkProductCreate: CheckoutLinkProductCreate): string;
export declare function checkoutLinkProductCreateFromJSON(jsonString: string): SafeParseResult<CheckoutLinkProductCreate, SDKValidationError>;
//# sourceMappingURL=checkoutlinkproductcreate.d.ts.map