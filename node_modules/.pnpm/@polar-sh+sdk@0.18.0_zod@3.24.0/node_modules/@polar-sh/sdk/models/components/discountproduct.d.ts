import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * A product that a discount can be applied to.
 */
export type DiscountProduct = {
    /**
     * Creation timestamp of the object.
     */
    createdAt: Date;
    /**
     * Last modification timestamp of the object.
     */
    modifiedAt: Date | null;
    /**
     * The ID of the product.
     */
    id: string;
    /**
     * The name of the product.
     */
    name: string;
    /**
     * The description of the product.
     */
    description: string | null;
    /**
     * Whether the product is a subscription tier.
     */
    isRecurring: boolean;
    /**
     * Whether the product is archived and no longer available.
     */
    isArchived: boolean;
    /**
     * The ID of the organization owning the product.
     */
    organizationId: string;
};
/** @internal */
export declare const DiscountProduct$inboundSchema: z.ZodType<DiscountProduct, z.ZodTypeDef, unknown>;
/** @internal */
export type DiscountProduct$Outbound = {
    created_at: string;
    modified_at: string | null;
    id: string;
    name: string;
    description: string | null;
    is_recurring: boolean;
    is_archived: boolean;
    organization_id: string;
};
/** @internal */
export declare const DiscountProduct$outboundSchema: z.ZodType<DiscountProduct$Outbound, z.ZodTypeDef, DiscountProduct>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DiscountProduct$ {
    /** @deprecated use `DiscountProduct$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DiscountProduct, z.ZodTypeDef, unknown>;
    /** @deprecated use `DiscountProduct$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DiscountProduct$Outbound, z.ZodTypeDef, DiscountProduct>;
    /** @deprecated use `DiscountProduct$Outbound` instead. */
    type Outbound = DiscountProduct$Outbound;
}
export declare function discountProductToJSON(discountProduct: DiscountProduct): string;
export declare function discountProductFromJSON(jsonString: string): SafeParseResult<DiscountProduct, SDKValidationError>;
//# sourceMappingURL=discountproduct.d.ts.map