"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomFieldSelect$ = exports.CustomFieldSelect$outboundSchema = exports.CustomFieldSelect$inboundSchema = exports.CustomFieldSelectType$ = exports.CustomFieldSelectType$outboundSchema = exports.CustomFieldSelectType$inboundSchema = exports.CustomFieldSelectMetadata$ = exports.CustomFieldSelectMetadata$outboundSchema = exports.CustomFieldSelectMetadata$inboundSchema = exports.CustomFieldSelectType = void 0;
exports.customFieldSelectMetadataToJSON = customFieldSelectMetadataToJSON;
exports.customFieldSelectMetadataFromJSON = customFieldSelectMetadataFromJSON;
exports.customFieldSelectToJSON = customFieldSelectToJSON;
exports.customFieldSelectFromJSON = customFieldSelectFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const customfieldselectproperties_js_1 = require("./customfieldselectproperties.js");
exports.CustomFieldSelectType = {
    Select: "select",
};
/** @internal */
exports.CustomFieldSelectMetadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
exports.CustomFieldSelectMetadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomFieldSelectMetadata$;
(function (CustomFieldSelectMetadata$) {
    /** @deprecated use `CustomFieldSelectMetadata$inboundSchema` instead. */
    CustomFieldSelectMetadata$.inboundSchema = exports.CustomFieldSelectMetadata$inboundSchema;
    /** @deprecated use `CustomFieldSelectMetadata$outboundSchema` instead. */
    CustomFieldSelectMetadata$.outboundSchema = exports.CustomFieldSelectMetadata$outboundSchema;
})(CustomFieldSelectMetadata$ || (exports.CustomFieldSelectMetadata$ = CustomFieldSelectMetadata$ = {}));
function customFieldSelectMetadataToJSON(customFieldSelectMetadata) {
    return JSON.stringify(exports.CustomFieldSelectMetadata$outboundSchema.parse(customFieldSelectMetadata));
}
function customFieldSelectMetadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomFieldSelectMetadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldSelectMetadata' from JSON`);
}
/** @internal */
exports.CustomFieldSelectType$inboundSchema = z.nativeEnum(exports.CustomFieldSelectType);
/** @internal */
exports.CustomFieldSelectType$outboundSchema = exports.CustomFieldSelectType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomFieldSelectType$;
(function (CustomFieldSelectType$) {
    /** @deprecated use `CustomFieldSelectType$inboundSchema` instead. */
    CustomFieldSelectType$.inboundSchema = exports.CustomFieldSelectType$inboundSchema;
    /** @deprecated use `CustomFieldSelectType$outboundSchema` instead. */
    CustomFieldSelectType$.outboundSchema = exports.CustomFieldSelectType$outboundSchema;
})(CustomFieldSelectType$ || (exports.CustomFieldSelectType$ = CustomFieldSelectType$ = {}));
/** @internal */
exports.CustomFieldSelect$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    type: z.literal("select").optional(),
    slug: z.string(),
    name: z.string(),
    organization_id: z.string(),
    properties: customfieldselectproperties_js_1.CustomFieldSelectProperties$inboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "organization_id": "organizationId",
    });
});
/** @internal */
exports.CustomFieldSelect$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    type: z.literal("select").default("select"),
    slug: z.string(),
    name: z.string(),
    organizationId: z.string(),
    properties: customfieldselectproperties_js_1.CustomFieldSelectProperties$outboundSchema,
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        organizationId: "organization_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomFieldSelect$;
(function (CustomFieldSelect$) {
    /** @deprecated use `CustomFieldSelect$inboundSchema` instead. */
    CustomFieldSelect$.inboundSchema = exports.CustomFieldSelect$inboundSchema;
    /** @deprecated use `CustomFieldSelect$outboundSchema` instead. */
    CustomFieldSelect$.outboundSchema = exports.CustomFieldSelect$outboundSchema;
})(CustomFieldSelect$ || (exports.CustomFieldSelect$ = CustomFieldSelect$ = {}));
function customFieldSelectToJSON(customFieldSelect) {
    return JSON.stringify(exports.CustomFieldSelect$outboundSchema.parse(customFieldSelect));
}
function customFieldSelectFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomFieldSelect$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldSelect' from JSON`);
}
//# sourceMappingURL=customfieldselect.js.map