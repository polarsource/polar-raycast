import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { CustomFieldNumberProperties, CustomFieldNumberProperties$Outbound } from "./customfieldnumberproperties.js";
export type CustomFieldCreateNumberMetadata = string | number | boolean;
export declare const CustomFieldCreateNumberType: {
    readonly Number: "number";
};
export type CustomFieldCreateNumberType = ClosedEnum<typeof CustomFieldCreateNumberType>;
/**
 * Schema to create a custom field of type number.
 */
export type CustomFieldCreateNumber = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    type?: "number" | undefined;
    /**
     * Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens.
     */
    slug: string;
    /**
     * Name of the custom field.
     */
    name: string;
    /**
     * The ID of the organization owning the custom field. **Required unless you use an organization token.**
     */
    organizationId?: string | null | undefined;
    properties: CustomFieldNumberProperties;
};
/** @internal */
export declare const CustomFieldCreateNumberMetadata$inboundSchema: z.ZodType<CustomFieldCreateNumberMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldCreateNumberMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const CustomFieldCreateNumberMetadata$outboundSchema: z.ZodType<CustomFieldCreateNumberMetadata$Outbound, z.ZodTypeDef, CustomFieldCreateNumberMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldCreateNumberMetadata$ {
    /** @deprecated use `CustomFieldCreateNumberMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldCreateNumberMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldCreateNumberMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldCreateNumberMetadata$Outbound, z.ZodTypeDef, CustomFieldCreateNumberMetadata>;
    /** @deprecated use `CustomFieldCreateNumberMetadata$Outbound` instead. */
    type Outbound = CustomFieldCreateNumberMetadata$Outbound;
}
export declare function customFieldCreateNumberMetadataToJSON(customFieldCreateNumberMetadata: CustomFieldCreateNumberMetadata): string;
export declare function customFieldCreateNumberMetadataFromJSON(jsonString: string): SafeParseResult<CustomFieldCreateNumberMetadata, SDKValidationError>;
/** @internal */
export declare const CustomFieldCreateNumberType$inboundSchema: z.ZodNativeEnum<typeof CustomFieldCreateNumberType>;
/** @internal */
export declare const CustomFieldCreateNumberType$outboundSchema: z.ZodNativeEnum<typeof CustomFieldCreateNumberType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldCreateNumberType$ {
    /** @deprecated use `CustomFieldCreateNumberType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Number: "number";
    }>;
    /** @deprecated use `CustomFieldCreateNumberType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Number: "number";
    }>;
}
/** @internal */
export declare const CustomFieldCreateNumber$inboundSchema: z.ZodType<CustomFieldCreateNumber, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldCreateNumber$Outbound = {
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    type: "number";
    slug: string;
    name: string;
    organization_id?: string | null | undefined;
    properties: CustomFieldNumberProperties$Outbound;
};
/** @internal */
export declare const CustomFieldCreateNumber$outboundSchema: z.ZodType<CustomFieldCreateNumber$Outbound, z.ZodTypeDef, CustomFieldCreateNumber>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldCreateNumber$ {
    /** @deprecated use `CustomFieldCreateNumber$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldCreateNumber, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldCreateNumber$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldCreateNumber$Outbound, z.ZodTypeDef, CustomFieldCreateNumber>;
    /** @deprecated use `CustomFieldCreateNumber$Outbound` instead. */
    type Outbound = CustomFieldCreateNumber$Outbound;
}
export declare function customFieldCreateNumberToJSON(customFieldCreateNumber: CustomFieldCreateNumber): string;
export declare function customFieldCreateNumberFromJSON(jsonString: string): SafeParseResult<CustomFieldCreateNumber, SDKValidationError>;
//# sourceMappingURL=customfieldcreatenumber.d.ts.map