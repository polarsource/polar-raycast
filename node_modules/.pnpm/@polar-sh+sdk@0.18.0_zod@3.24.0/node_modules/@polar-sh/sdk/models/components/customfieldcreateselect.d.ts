import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { CustomFieldSelectProperties, CustomFieldSelectProperties$Outbound } from "./customfieldselectproperties.js";
export type CustomFieldCreateSelectMetadata = string | number | boolean;
export declare const CustomFieldCreateSelectType: {
    readonly Select: "select";
};
export type CustomFieldCreateSelectType = ClosedEnum<typeof CustomFieldCreateSelectType>;
/**
 * Schema to create a custom field of type select.
 */
export type CustomFieldCreateSelect = {
    /**
     * Key-value object allowing you to store additional information.
     *
     * @remarks
     *
     * The key must be a string with a maximum length of **40 characters**.
     * The value must be either:
     *
     * * A string with a maximum length of **500 characters**
     * * An integer
     * * A boolean
     *
     * You can store up to **50 key-value pairs**.
     */
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    type?: "select" | undefined;
    /**
     * Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.It can only contain ASCII letters, numbers and hyphens.
     */
    slug: string;
    /**
     * Name of the custom field.
     */
    name: string;
    /**
     * The ID of the organization owning the custom field. **Required unless you use an organization token.**
     */
    organizationId?: string | null | undefined;
    properties: CustomFieldSelectProperties;
};
/** @internal */
export declare const CustomFieldCreateSelectMetadata$inboundSchema: z.ZodType<CustomFieldCreateSelectMetadata, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldCreateSelectMetadata$Outbound = string | number | boolean;
/** @internal */
export declare const CustomFieldCreateSelectMetadata$outboundSchema: z.ZodType<CustomFieldCreateSelectMetadata$Outbound, z.ZodTypeDef, CustomFieldCreateSelectMetadata>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldCreateSelectMetadata$ {
    /** @deprecated use `CustomFieldCreateSelectMetadata$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldCreateSelectMetadata, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldCreateSelectMetadata$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldCreateSelectMetadata$Outbound, z.ZodTypeDef, CustomFieldCreateSelectMetadata>;
    /** @deprecated use `CustomFieldCreateSelectMetadata$Outbound` instead. */
    type Outbound = CustomFieldCreateSelectMetadata$Outbound;
}
export declare function customFieldCreateSelectMetadataToJSON(customFieldCreateSelectMetadata: CustomFieldCreateSelectMetadata): string;
export declare function customFieldCreateSelectMetadataFromJSON(jsonString: string): SafeParseResult<CustomFieldCreateSelectMetadata, SDKValidationError>;
/** @internal */
export declare const CustomFieldCreateSelectType$inboundSchema: z.ZodNativeEnum<typeof CustomFieldCreateSelectType>;
/** @internal */
export declare const CustomFieldCreateSelectType$outboundSchema: z.ZodNativeEnum<typeof CustomFieldCreateSelectType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldCreateSelectType$ {
    /** @deprecated use `CustomFieldCreateSelectType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Select: "select";
    }>;
    /** @deprecated use `CustomFieldCreateSelectType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Select: "select";
    }>;
}
/** @internal */
export declare const CustomFieldCreateSelect$inboundSchema: z.ZodType<CustomFieldCreateSelect, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomFieldCreateSelect$Outbound = {
    metadata?: {
        [k: string]: string | number | boolean;
    } | undefined;
    type: "select";
    slug: string;
    name: string;
    organization_id?: string | null | undefined;
    properties: CustomFieldSelectProperties$Outbound;
};
/** @internal */
export declare const CustomFieldCreateSelect$outboundSchema: z.ZodType<CustomFieldCreateSelect$Outbound, z.ZodTypeDef, CustomFieldCreateSelect>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomFieldCreateSelect$ {
    /** @deprecated use `CustomFieldCreateSelect$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomFieldCreateSelect, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomFieldCreateSelect$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomFieldCreateSelect$Outbound, z.ZodTypeDef, CustomFieldCreateSelect>;
    /** @deprecated use `CustomFieldCreateSelect$Outbound` instead. */
    type Outbound = CustomFieldCreateSelect$Outbound;
}
export declare function customFieldCreateSelectToJSON(customFieldCreateSelect: CustomFieldCreateSelect): string;
export declare function customFieldCreateSelectFromJSON(jsonString: string): SafeParseResult<CustomFieldCreateSelect, SDKValidationError>;
//# sourceMappingURL=customfieldcreateselect.d.ts.map