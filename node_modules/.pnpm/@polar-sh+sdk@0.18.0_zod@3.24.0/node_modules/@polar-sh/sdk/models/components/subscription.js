"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscription$ = exports.Subscription$outboundSchema = exports.Subscription$inboundSchema = exports.SubscriptionDiscount$ = exports.SubscriptionDiscount$outboundSchema = exports.SubscriptionDiscount$inboundSchema = exports.SubscriptionCustomFieldData$ = exports.SubscriptionCustomFieldData$outboundSchema = exports.SubscriptionCustomFieldData$inboundSchema = exports.Metadata$ = exports.Metadata$outboundSchema = exports.Metadata$inboundSchema = void 0;
exports.metadataToJSON = metadataToJSON;
exports.metadataFromJSON = metadataFromJSON;
exports.subscriptionCustomFieldDataToJSON = subscriptionCustomFieldDataToJSON;
exports.subscriptionCustomFieldDataFromJSON = subscriptionCustomFieldDataFromJSON;
exports.subscriptionDiscountToJSON = subscriptionDiscountToJSON;
exports.subscriptionDiscountFromJSON = subscriptionDiscountFromJSON;
exports.subscriptionToJSON = subscriptionToJSON;
exports.subscriptionFromJSON = subscriptionFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const discountfixedonceforeverdurationbase_js_1 = require("./discountfixedonceforeverdurationbase.js");
const discountfixedrepeatdurationbase_js_1 = require("./discountfixedrepeatdurationbase.js");
const discountpercentageonceforeverdurationbase_js_1 = require("./discountpercentageonceforeverdurationbase.js");
const discountpercentagerepeatdurationbase_js_1 = require("./discountpercentagerepeatdurationbase.js");
const product_js_1 = require("./product.js");
const productpricerecurring_js_1 = require("./productpricerecurring.js");
const subscriptionrecurringinterval_js_1 = require("./subscriptionrecurringinterval.js");
const subscriptionstatus_js_1 = require("./subscriptionstatus.js");
const subscriptionuser_js_1 = require("./subscriptionuser.js");
/** @internal */
exports.Metadata$inboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/** @internal */
exports.Metadata$outboundSchema = z.union([z.string(), z.number().int(), z.boolean()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Metadata$;
(function (Metadata$) {
    /** @deprecated use `Metadata$inboundSchema` instead. */
    Metadata$.inboundSchema = exports.Metadata$inboundSchema;
    /** @deprecated use `Metadata$outboundSchema` instead. */
    Metadata$.outboundSchema = exports.Metadata$outboundSchema;
})(Metadata$ || (exports.Metadata$ = Metadata$ = {}));
function metadataToJSON(metadata) {
    return JSON.stringify(exports.Metadata$outboundSchema.parse(metadata));
}
function metadataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Metadata$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Metadata' from JSON`);
}
/** @internal */
exports.SubscriptionCustomFieldData$inboundSchema = z.object({});
/** @internal */
exports.SubscriptionCustomFieldData$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SubscriptionCustomFieldData$;
(function (SubscriptionCustomFieldData$) {
    /** @deprecated use `SubscriptionCustomFieldData$inboundSchema` instead. */
    SubscriptionCustomFieldData$.inboundSchema = exports.SubscriptionCustomFieldData$inboundSchema;
    /** @deprecated use `SubscriptionCustomFieldData$outboundSchema` instead. */
    SubscriptionCustomFieldData$.outboundSchema = exports.SubscriptionCustomFieldData$outboundSchema;
})(SubscriptionCustomFieldData$ || (exports.SubscriptionCustomFieldData$ = SubscriptionCustomFieldData$ = {}));
function subscriptionCustomFieldDataToJSON(subscriptionCustomFieldData) {
    return JSON.stringify(exports.SubscriptionCustomFieldData$outboundSchema.parse(subscriptionCustomFieldData));
}
function subscriptionCustomFieldDataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SubscriptionCustomFieldData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriptionCustomFieldData' from JSON`);
}
/** @internal */
exports.SubscriptionDiscount$inboundSchema = z.union([
    discountpercentageonceforeverdurationbase_js_1.DiscountPercentageOnceForeverDurationBase$inboundSchema,
    discountfixedonceforeverdurationbase_js_1.DiscountFixedOnceForeverDurationBase$inboundSchema,
    discountpercentagerepeatdurationbase_js_1.DiscountPercentageRepeatDurationBase$inboundSchema,
    discountfixedrepeatdurationbase_js_1.DiscountFixedRepeatDurationBase$inboundSchema,
]);
/** @internal */
exports.SubscriptionDiscount$outboundSchema = z.union([
    discountpercentageonceforeverdurationbase_js_1.DiscountPercentageOnceForeverDurationBase$outboundSchema,
    discountfixedonceforeverdurationbase_js_1.DiscountFixedOnceForeverDurationBase$outboundSchema,
    discountpercentagerepeatdurationbase_js_1.DiscountPercentageRepeatDurationBase$outboundSchema,
    discountfixedrepeatdurationbase_js_1.DiscountFixedRepeatDurationBase$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SubscriptionDiscount$;
(function (SubscriptionDiscount$) {
    /** @deprecated use `SubscriptionDiscount$inboundSchema` instead. */
    SubscriptionDiscount$.inboundSchema = exports.SubscriptionDiscount$inboundSchema;
    /** @deprecated use `SubscriptionDiscount$outboundSchema` instead. */
    SubscriptionDiscount$.outboundSchema = exports.SubscriptionDiscount$outboundSchema;
})(SubscriptionDiscount$ || (exports.SubscriptionDiscount$ = SubscriptionDiscount$ = {}));
function subscriptionDiscountToJSON(subscriptionDiscount) {
    return JSON.stringify(exports.SubscriptionDiscount$outboundSchema.parse(subscriptionDiscount));
}
function subscriptionDiscountFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SubscriptionDiscount$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriptionDiscount' from JSON`);
}
/** @internal */
exports.Subscription$inboundSchema = z.object({
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    modified_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    id: z.string(),
    amount: z.nullable(z.number().int()),
    currency: z.nullable(z.string()),
    recurring_interval: subscriptionrecurringinterval_js_1.SubscriptionRecurringInterval$inboundSchema,
    status: subscriptionstatus_js_1.SubscriptionStatus$inboundSchema,
    current_period_start: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    current_period_end: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    cancel_at_period_end: z.boolean(),
    started_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    ended_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))),
    user_id: z.string(),
    product_id: z.string(),
    price_id: z.string(),
    discount_id: z.nullable(z.string()),
    checkout_id: z.nullable(z.string()),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    custom_field_data: z.lazy(() => exports.SubscriptionCustomFieldData$inboundSchema)
        .optional(),
    user: subscriptionuser_js_1.SubscriptionUser$inboundSchema,
    product: product_js_1.Product$inboundSchema,
    price: productpricerecurring_js_1.ProductPriceRecurring$inboundSchema,
    discount: z.nullable(z.union([
        discountpercentageonceforeverdurationbase_js_1.DiscountPercentageOnceForeverDurationBase$inboundSchema,
        discountfixedonceforeverdurationbase_js_1.DiscountFixedOnceForeverDurationBase$inboundSchema,
        discountpercentagerepeatdurationbase_js_1.DiscountPercentageRepeatDurationBase$inboundSchema,
        discountfixedrepeatdurationbase_js_1.DiscountFixedRepeatDurationBase$inboundSchema,
    ])),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "recurring_interval": "recurringInterval",
        "current_period_start": "currentPeriodStart",
        "current_period_end": "currentPeriodEnd",
        "cancel_at_period_end": "cancelAtPeriodEnd",
        "started_at": "startedAt",
        "ended_at": "endedAt",
        "user_id": "userId",
        "product_id": "productId",
        "price_id": "priceId",
        "discount_id": "discountId",
        "checkout_id": "checkoutId",
        "custom_field_data": "customFieldData",
    });
});
/** @internal */
exports.Subscription$outboundSchema = z.object({
    createdAt: z.date().transform(v => v.toISOString()),
    modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
    id: z.string(),
    amount: z.nullable(z.number().int()),
    currency: z.nullable(z.string()),
    recurringInterval: subscriptionrecurringinterval_js_1.SubscriptionRecurringInterval$outboundSchema,
    status: subscriptionstatus_js_1.SubscriptionStatus$outboundSchema,
    currentPeriodStart: z.date().transform(v => v.toISOString()),
    currentPeriodEnd: z.nullable(z.date().transform(v => v.toISOString())),
    cancelAtPeriodEnd: z.boolean(),
    startedAt: z.nullable(z.date().transform(v => v.toISOString())),
    endedAt: z.nullable(z.date().transform(v => v.toISOString())),
    userId: z.string(),
    productId: z.string(),
    priceId: z.string(),
    discountId: z.nullable(z.string()),
    checkoutId: z.nullable(z.string()),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    customFieldData: z.lazy(() => exports.SubscriptionCustomFieldData$outboundSchema)
        .optional(),
    user: subscriptionuser_js_1.SubscriptionUser$outboundSchema,
    product: product_js_1.Product$outboundSchema,
    price: productpricerecurring_js_1.ProductPriceRecurring$outboundSchema,
    discount: z.nullable(z.union([
        discountpercentageonceforeverdurationbase_js_1.DiscountPercentageOnceForeverDurationBase$outboundSchema,
        discountfixedonceforeverdurationbase_js_1.DiscountFixedOnceForeverDurationBase$outboundSchema,
        discountpercentagerepeatdurationbase_js_1.DiscountPercentageRepeatDurationBase$outboundSchema,
        discountfixedrepeatdurationbase_js_1.DiscountFixedRepeatDurationBase$outboundSchema,
    ])),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
        modifiedAt: "modified_at",
        recurringInterval: "recurring_interval",
        currentPeriodStart: "current_period_start",
        currentPeriodEnd: "current_period_end",
        cancelAtPeriodEnd: "cancel_at_period_end",
        startedAt: "started_at",
        endedAt: "ended_at",
        userId: "user_id",
        productId: "product_id",
        priceId: "price_id",
        discountId: "discount_id",
        checkoutId: "checkout_id",
        customFieldData: "custom_field_data",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Subscription$;
(function (Subscription$) {
    /** @deprecated use `Subscription$inboundSchema` instead. */
    Subscription$.inboundSchema = exports.Subscription$inboundSchema;
    /** @deprecated use `Subscription$outboundSchema` instead. */
    Subscription$.outboundSchema = exports.Subscription$outboundSchema;
})(Subscription$ || (exports.Subscription$ = Subscription$ = {}));
function subscriptionToJSON(subscription) {
    return JSON.stringify(exports.Subscription$outboundSchema.parse(subscription));
}
function subscriptionFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Subscription$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Subscription' from JSON`);
}
//# sourceMappingURL=subscription.js.map